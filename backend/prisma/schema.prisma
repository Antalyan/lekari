generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Person {
  id              Int           @id @default(autoincrement())
  degree          String?
  firstname       String
  surname         String
  birthdate       DateTime
  email           String        @unique
  phonePrefix     String
  phone           Int
  deleted         Boolean       @default(false)
  insuranceNumber Int?
  addressId       Int           @unique
  address         Address       @relation(fields: [addressId], references: [id])
  password        String
  reservations    Reservation[]
  doctor          Doctor?
}

model PersonTmp {
  id              Int           @id @default(autoincrement())
  degree          String?
  firstname       String
  surname         String
  birthdate       DateTime
  email           String?       
  phonePrefix     String
  phone           Int
  insuranceNumber Int?
  addressId       Int?          @unique
  address         Address?      @relation(fields: [addressId], references: [id])
  reservations    Reservation[]
}

model Address {
  id             Int        @id @default(autoincrement())
  country        String
  city           String
  postalCode     Int
  street         String?
  buildingNumber String
  person         Person?
  doctor         Doctor?
  personTemporal PersonTmp?
}

model Reservation {
  id            String     @id @default(uuid())
  personId      Int?
  person        Person?    @relation(fields: [personId], references: [id])
  personTmpId   Int?
  personTmp     PersonTmp? @relation(fields: [personTmpId], references: [id])
  doctorId      Int
  doctor        Doctor     @relation(fields: [doctorId], references: [id])
  fromTime          DateTime
  toTime DateTime
  personComment String?
  created       DateTime   @default(now())
}

model Doctor {
  id               Int                @id @default(autoincrement())
  specialization   String // TODO: enum
  actuality        String?
  addressId        Int                @unique
  address          Address            @relation(fields: [addressId], references: [id])
  personId         Int                @unique
  person           Person             @relation(fields: [personId], references: [id])
  profilePicture   String?
  deleted          Boolean            @default(false)
  //
  email            String?
  phone            String?
  description      String?
  link             String?
  reservations     Reservation[]
  references       Review[]
  languages        DoctorLanguage[]
  reservationHours ReservationHours[]
  openingHours     OpeningHours[]
}

model Review {
  id       String   @id @default(uuid())
  doctorId Int
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  comment  String?
  rate     Int
  author   String?
  created  DateTime @default(now())
}

model DoctorLanguage {
  doctorId Int
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  language String // TODO: enum

  @@unique([doctorId, language])
}

model ReservationHours {
  doctorId Int
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  day      String // TODO: enum
  fromTime DateTime
  toTime   DateTime
  fromDate DateTime @default(now())
  interval Int      @default(20)

  @@unique([doctorId, day, fromDate])
}

model OpeningHours {
  doctorId Int
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  day      String
  opening  String

  @@unique([doctorId, day])
}
