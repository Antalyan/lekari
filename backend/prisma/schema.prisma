generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Person {
  id              String        @id @default(uuid())
  degree          String?
  firstname       String
  surename        String
  birthdate       DateTime
  email           String        @unique
  phonePrefix     String
  phone           Int
  insuranceNumber Int?
  addressId       String        @unique
  address         Address       @relation(fields: [addressId], references: [id])
  password        String
  reservations    Reservation[]
  doctor          Doctor?
}

model PersonTmp {
  id              String        @id @default(uuid())
  degree          String?
  firstname       String
  surename        String
  birthdate       DateTime
  email           String?       @unique
  phonePrefix     String
  phone           Int
  insuranceNumber Int?
  addressId       String?       @unique
  address         Address?      @relation(fields: [addressId], references: [id])
  reservations    Reservation[]
}

model Address {
  id             String     @id @default(uuid())
  country        String
  city           String
  postalCode     Int
  street         String?
  buildingNumber String
  person         Person?
  doctor         Doctor?
  personTemporal PersonTmp?
}

model Reservation {
  id            String     @id @default(uuid())
  personId      String
  person        Person     @relation(fields: [personId], references: [id])
  personTmpId   String?
  personTmp     PersonTmp? @relation(fields: [personId], references: [id])
  doctorId      String
  doctor        Doctor     @relation(fields: [doctorId], references: [id])
  from          DateTime
  personComment String?
  created       DateTime   @default(now())
}

model Doctor {
  id                     String                   @id @default(uuid())
  specialization         String // TODO: enum
  actuality              String?
  addressId              String                   @unique
  address                Address                  @relation(fields: [addressId], references: [id])
  personId               String                   @unique
  person                 Person                   @relation(fields: [personId], references: [id])
  profilePicture         String?
  //
  email                  String?
  phone                  String?
  description            String?
  link                   String?
  reservations           Reservation[]
  references             Review[]
  languages              DoctorLanguage[]
  openingHours           ReservationHours[]
  openingHoursOrdination OpeningHoursOrdination[]
}

model Review {
  id       String   @id @default(uuid())
  doctorId String
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  comment  String?
  rate     Int
  author   String?
  created  DateTime @default(now())
}

model DoctorLanguage {
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  language String // TODO: enum

  @@unique([doctorId, language])
}

model ReservationHours {
  doctorId String
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  day      String // TODO: enum
  fromTime DateTime
  toTime   DateTime
  fromDate DateTime @default(now()) // TODO: in diagram it is time
  interval Int      @default(20)

  @@unique([doctorId, day, fromDate])
}

model OpeningHoursOrdination {
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  day      String
  opening  String

  @@unique([doctorId, day])
}
