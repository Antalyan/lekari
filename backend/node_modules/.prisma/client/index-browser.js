
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.13.0
 * Query Engine version: efdf9b1183dddfd4258cd181a72125755215ab7b
 */
Prisma.prismaVersion = {
  client: "3.13.0",
  engine: "efdf9b1183dddfd4258cd181a72125755215ab7b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.PersonScalarFieldEnum = makeEnum({
  id: 'id',
  firstname: 'firstname',
  surename: 'surename',
  degree: 'degree',
  birthdate: 'birthdate',
  email: 'email',
  phone: 'phone',
  insuraceNumber: 'insuraceNumber',
  insuranceId: 'insuranceId',
  addressId: 'addressId',
  password: 'password'
});

exports.Prisma.InsuranceCompanyScalarFieldEnum = makeEnum({
  id: 'id',
  number: 'number',
  name: 'name'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  country: 'country',
  city: 'city',
  postalCode: 'postalCode',
  street: 'street'
});

exports.Prisma.ReservationScalarFieldEnum = makeEnum({
  id: 'id',
  personId: 'personId',
  doctorId: 'doctorId',
  from: 'from',
  personComment: 'personComment',
  doctorComment: 'doctorComment',
  created: 'created'
});

exports.Prisma.DoctorScalarFieldEnum = makeEnum({
  id: 'id',
  specialization: 'specialization',
  actuality: 'actuality',
  email: 'email',
  phone: 'phone',
  description: 'description',
  link: 'link',
  profilePicture: 'profilePicture',
  addressId: 'addressId',
  personId: 'personId'
});

exports.Prisma.ReferenceScalarFieldEnum = makeEnum({
  id: 'id',
  doctorId: 'doctorId',
  comment: 'comment',
  rate: 'rate',
  author: 'author',
  doctor_comment: 'doctor_comment',
  created: 'created'
});

exports.Prisma.DoctorLanguageScalarFieldEnum = makeEnum({
  doctorId: 'doctorId',
  language: 'language'
});

exports.Prisma.OpeningHoursScalarFieldEnum = makeEnum({
  doctorId: 'doctorId',
  day: 'day',
  fromTime: 'fromTime',
  toTime: 'toTime',
  fromDate: 'fromDate'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Person: 'Person',
  InsuranceCompany: 'InsuranceCompany',
  Address: 'Address',
  Reservation: 'Reservation',
  Doctor: 'Doctor',
  Reference: 'Reference',
  DoctorLanguage: 'DoctorLanguage',
  OpeningHours: 'OpeningHours'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
