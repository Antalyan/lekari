
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Person
 * 
 */
export type Person = {
  id: string
  firstname: string
  surename: string
  degree: string
  birthdate: Date
  email: string
  phone: number
  insuraceNumber: number
  insuranceId: string
  addressId: string
  password: string
}

/**
 * Model InsuranceCompany
 * 
 */
export type InsuranceCompany = {
  id: string
  number: number
  name: string
}

/**
 * Model Address
 * 
 */
export type Address = {
  id: string
  country: string
  city: string
  postalCode: number
  street: string
}

/**
 * Model Reservation
 * 
 */
export type Reservation = {
  id: string
  personId: string
  doctorId: string
  from: Date
  personComment: string
  doctorComment: string
  created: Date
}

/**
 * Model Doctor
 * 
 */
export type Doctor = {
  id: string
  specialization: string
  actuality: string
  email: string
  phone: string
  description: string
  link: string
  profilePicture: string
  addressId: string
  personId: string
}

/**
 * Model Reference
 * 
 */
export type Reference = {
  id: string
  doctorId: string
  comment: string
  rate: number
  author: string
  doctor_comment: string
  created: Date
}

/**
 * Model DoctorLanguage
 * 
 */
export type DoctorLanguage = {
  doctorId: string
  language: string
}

/**
 * Model OpeningHours
 * 
 */
export type OpeningHours = {
  doctorId: string
  day: string
  fromTime: Date
  toTime: Date
  fromDate: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more People
 * const people = await prisma.person.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more People
   * const people = await prisma.person.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<GlobalReject>;

  /**
   * `prisma.insuranceCompany`: Exposes CRUD operations for the **InsuranceCompany** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InsuranceCompanies
    * const insuranceCompanies = await prisma.insuranceCompany.findMany()
    * ```
    */
  get insuranceCompany(): Prisma.InsuranceCompanyDelegate<GlobalReject>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<GlobalReject>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<GlobalReject>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<GlobalReject>;

  /**
   * `prisma.reference`: Exposes CRUD operations for the **Reference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more References
    * const references = await prisma.reference.findMany()
    * ```
    */
  get reference(): Prisma.ReferenceDelegate<GlobalReject>;

  /**
   * `prisma.doctorLanguage`: Exposes CRUD operations for the **DoctorLanguage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorLanguages
    * const doctorLanguages = await prisma.doctorLanguage.findMany()
    * ```
    */
  get doctorLanguage(): Prisma.DoctorLanguageDelegate<GlobalReject>;

  /**
   * `prisma.openingHours`: Exposes CRUD operations for the **OpeningHours** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpeningHours
    * const openingHours = await prisma.openingHours.findMany()
    * ```
    */
  get openingHours(): Prisma.OpeningHoursDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.13.0
   * Query Engine version: efdf9b1183dddfd4258cd181a72125755215ab7b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Person: 'Person',
    InsuranceCompany: 'InsuranceCompany',
    Address: 'Address',
    Reservation: 'Reservation',
    Doctor: 'Doctor',
    Reference: 'Reference',
    DoctorLanguage: 'DoctorLanguage',
    OpeningHours: 'OpeningHours'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PersonCountOutputType
   */


  export type PersonCountOutputType = {
    reservations: number
  }

  export type PersonCountOutputTypeSelect = {
    reservations?: boolean
  }

  export type PersonCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PersonCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PersonCountOutputType
    : S extends undefined
    ? never
    : S extends PersonCountOutputTypeArgs
    ?'include' extends U
    ? PersonCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PersonCountOutputType ? PersonCountOutputType[P] : never
  } 
    : PersonCountOutputType
  : PersonCountOutputType




  // Custom InputTypes

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PersonCountOutputType
     * 
    **/
    select?: PersonCountOutputTypeSelect | null
  }



  /**
   * Count Type InsuranceCompanyCountOutputType
   */


  export type InsuranceCompanyCountOutputType = {
    persons: number
  }

  export type InsuranceCompanyCountOutputTypeSelect = {
    persons?: boolean
  }

  export type InsuranceCompanyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InsuranceCompanyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InsuranceCompanyCountOutputType
    : S extends undefined
    ? never
    : S extends InsuranceCompanyCountOutputTypeArgs
    ?'include' extends U
    ? InsuranceCompanyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof InsuranceCompanyCountOutputType ? InsuranceCompanyCountOutputType[P] : never
  } 
    : InsuranceCompanyCountOutputType
  : InsuranceCompanyCountOutputType




  // Custom InputTypes

  /**
   * InsuranceCompanyCountOutputType without action
   */
  export type InsuranceCompanyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompanyCountOutputType
     * 
    **/
    select?: InsuranceCompanyCountOutputTypeSelect | null
  }



  /**
   * Count Type DoctorCountOutputType
   */


  export type DoctorCountOutputType = {
    reservations: number
    references: number
    languages: number
    openingHours: number
  }

  export type DoctorCountOutputTypeSelect = {
    reservations?: boolean
    references?: boolean
    languages?: boolean
    openingHours?: boolean
  }

  export type DoctorCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DoctorCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DoctorCountOutputType
    : S extends undefined
    ? never
    : S extends DoctorCountOutputTypeArgs
    ?'include' extends U
    ? DoctorCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DoctorCountOutputType ? DoctorCountOutputType[P] : never
  } 
    : DoctorCountOutputType
  : DoctorCountOutputType




  // Custom InputTypes

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     * 
    **/
    select?: DoctorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Person
   */


  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    phone: number | null
    insuraceNumber: number | null
  }

  export type PersonSumAggregateOutputType = {
    phone: number | null
    insuraceNumber: number | null
  }

  export type PersonMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    surename: string | null
    degree: string | null
    birthdate: Date | null
    email: string | null
    phone: number | null
    insuraceNumber: number | null
    insuranceId: string | null
    addressId: string | null
    password: string | null
  }

  export type PersonMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    surename: string | null
    degree: string | null
    birthdate: Date | null
    email: string | null
    phone: number | null
    insuraceNumber: number | null
    insuranceId: string | null
    addressId: string | null
    password: string | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    firstname: number
    surename: number
    degree: number
    birthdate: number
    email: number
    phone: number
    insuraceNumber: number
    insuranceId: number
    addressId: number
    password: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    phone?: true
    insuraceNumber?: true
  }

  export type PersonSumAggregateInputType = {
    phone?: true
    insuraceNumber?: true
  }

  export type PersonMinAggregateInputType = {
    id?: true
    firstname?: true
    surename?: true
    degree?: true
    birthdate?: true
    email?: true
    phone?: true
    insuraceNumber?: true
    insuranceId?: true
    addressId?: true
    password?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    firstname?: true
    surename?: true
    degree?: true
    birthdate?: true
    email?: true
    phone?: true
    insuraceNumber?: true
    insuranceId?: true
    addressId?: true
    password?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    firstname?: true
    surename?: true
    degree?: true
    birthdate?: true
    email?: true
    phone?: true
    insuraceNumber?: true
    insuranceId?: true
    addressId?: true
    password?: true
    _all?: true
  }

  export type PersonAggregateArgs = {
    /**
     * Filter which Person to aggregate.
     * 
    **/
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs = {
    where?: PersonWhereInput
    orderBy?: Enumerable<PersonOrderByWithAggregationInput>
    by: Array<PersonScalarFieldEnum>
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _avg?: PersonAvgAggregateInputType
    _sum?: PersonSumAggregateInputType
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }


  export type PersonGroupByOutputType = {
    id: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date
    email: string
    phone: number
    insuraceNumber: number
    insuranceId: string
    addressId: string
    password: string
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect = {
    id?: boolean
    firstname?: boolean
    surename?: boolean
    degree?: boolean
    birthdate?: boolean
    email?: boolean
    phone?: boolean
    insuraceNumber?: boolean
    insuranceId?: boolean
    insurance?: boolean | InsuranceCompanyArgs
    addressId?: boolean
    address?: boolean | AddressArgs
    password?: boolean
    reservations?: boolean | ReservationFindManyArgs
    doctor?: boolean | DoctorArgs
    _count?: boolean | PersonCountOutputTypeArgs
  }

  export type PersonInclude = {
    insurance?: boolean | InsuranceCompanyArgs
    address?: boolean | AddressArgs
    reservations?: boolean | ReservationFindManyArgs
    doctor?: boolean | DoctorArgs
    _count?: boolean | PersonCountOutputTypeArgs
  }

  export type PersonGetPayload<
    S extends boolean | null | undefined | PersonArgs,
    U = keyof S
      > = S extends true
        ? Person
    : S extends undefined
    ? never
    : S extends PersonArgs | PersonFindManyArgs
    ?'include' extends U
    ? Person  & {
    [P in TrueKeys<S['include']>]:
        P extends 'insurance' ? InsuranceCompanyGetPayload<S['include'][P]> :
        P extends 'address' ? AddressGetPayload<S['include'][P]> :
        P extends 'reservations' ? Array < ReservationGetPayload<S['include'][P]>>  :
        P extends 'doctor' ? DoctorGetPayload<S['include'][P]> | null :
        P extends '_count' ? PersonCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'insurance' ? InsuranceCompanyGetPayload<S['select'][P]> :
        P extends 'address' ? AddressGetPayload<S['select'][P]> :
        P extends 'reservations' ? Array < ReservationGetPayload<S['select'][P]>>  :
        P extends 'doctor' ? DoctorGetPayload<S['select'][P]> | null :
        P extends '_count' ? PersonCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Person ? Person[P] : never
  } 
    : Person
  : Person


  type PersonCountArgs = Merge<
    Omit<PersonFindManyArgs, 'select' | 'include'> & {
      select?: PersonCountAggregateInputType | true
    }
  >

  export interface PersonDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PersonFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Person'> extends True ? CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>> : CheckSelect<T, Prisma__PersonClient<Person | null >, Prisma__PersonClient<PersonGetPayload<T> | null >>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PersonFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Person'> extends True ? CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>> : CheckSelect<T, Prisma__PersonClient<Person | null >, Prisma__PersonClient<PersonGetPayload<T> | null >>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonFindManyArgs>(
      args?: SelectSubset<T, PersonFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Person>>, PrismaPromise<Array<PersonGetPayload<T>>>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
    **/
    create<T extends PersonCreateArgs>(
      args: SelectSubset<T, PersonCreateArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
    **/
    delete<T extends PersonDeleteArgs>(
      args: SelectSubset<T, PersonDeleteArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonUpdateArgs>(
      args: SelectSubset<T, PersonUpdateArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonDeleteManyArgs>(
      args?: SelectSubset<T, PersonDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonUpdateManyArgs>(
      args: SelectSubset<T, PersonUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
    **/
    upsert<T extends PersonUpsertArgs>(
      args: SelectSubset<T, PersonUpsertArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>

    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PersonClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    insurance<T extends InsuranceCompanyArgs = {}>(args?: Subset<T, InsuranceCompanyArgs>): CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany | null >, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T> | null >>;

    address<T extends AddressArgs = {}>(args?: Subset<T, AddressArgs>): CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>;

    reservations<T extends ReservationFindManyArgs = {}>(args?: Subset<T, ReservationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Reservation>>, PrismaPromise<Array<ReservationGetPayload<T>>>>;

    doctor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * Throw an Error if a Person can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Person to fetch.
     * 
    **/
    where: PersonWhereUniqueInput
  }


  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * Throw an Error if a Person can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Person to fetch.
     * 
    **/
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     * 
    **/
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     * 
    **/
    distinct?: Enumerable<PersonScalarFieldEnum>
  }


  /**
   * Person findMany
   */
  export type PersonFindManyArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * Filter, which People to fetch.
     * 
    **/
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     * 
    **/
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PersonScalarFieldEnum>
  }


  /**
   * Person create
   */
  export type PersonCreateArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * The data needed to create a Person.
     * 
    **/
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }


  /**
   * Person update
   */
  export type PersonUpdateArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * The data needed to update a Person.
     * 
    **/
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     * 
    **/
    where: PersonWhereUniqueInput
  }


  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs = {
    /**
     * The data used to update People.
     * 
    **/
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     * 
    **/
    where?: PersonWhereInput
  }


  /**
   * Person upsert
   */
  export type PersonUpsertArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * The filter to search for the Person to update in case it exists.
     * 
    **/
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     * 
    **/
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }


  /**
   * Person delete
   */
  export type PersonDeleteArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
    /**
     * Filter which Person to delete.
     * 
    **/
    where: PersonWhereUniqueInput
  }


  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs = {
    /**
     * Filter which People to delete
     * 
    **/
    where?: PersonWhereInput
  }


  /**
   * Person without action
   */
  export type PersonArgs = {
    /**
     * Select specific fields to fetch from the Person
     * 
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonInclude | null
  }



  /**
   * Model InsuranceCompany
   */


  export type AggregateInsuranceCompany = {
    _count: InsuranceCompanyCountAggregateOutputType | null
    _avg: InsuranceCompanyAvgAggregateOutputType | null
    _sum: InsuranceCompanySumAggregateOutputType | null
    _min: InsuranceCompanyMinAggregateOutputType | null
    _max: InsuranceCompanyMaxAggregateOutputType | null
  }

  export type InsuranceCompanyAvgAggregateOutputType = {
    number: number | null
  }

  export type InsuranceCompanySumAggregateOutputType = {
    number: number | null
  }

  export type InsuranceCompanyMinAggregateOutputType = {
    id: string | null
    number: number | null
    name: string | null
  }

  export type InsuranceCompanyMaxAggregateOutputType = {
    id: string | null
    number: number | null
    name: string | null
  }

  export type InsuranceCompanyCountAggregateOutputType = {
    id: number
    number: number
    name: number
    _all: number
  }


  export type InsuranceCompanyAvgAggregateInputType = {
    number?: true
  }

  export type InsuranceCompanySumAggregateInputType = {
    number?: true
  }

  export type InsuranceCompanyMinAggregateInputType = {
    id?: true
    number?: true
    name?: true
  }

  export type InsuranceCompanyMaxAggregateInputType = {
    id?: true
    number?: true
    name?: true
  }

  export type InsuranceCompanyCountAggregateInputType = {
    id?: true
    number?: true
    name?: true
    _all?: true
  }

  export type InsuranceCompanyAggregateArgs = {
    /**
     * Filter which InsuranceCompany to aggregate.
     * 
    **/
    where?: InsuranceCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceCompanies to fetch.
     * 
    **/
    orderBy?: Enumerable<InsuranceCompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InsuranceCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceCompanies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceCompanies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InsuranceCompanies
    **/
    _count?: true | InsuranceCompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InsuranceCompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InsuranceCompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsuranceCompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsuranceCompanyMaxAggregateInputType
  }

  export type GetInsuranceCompanyAggregateType<T extends InsuranceCompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateInsuranceCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsuranceCompany[P]>
      : GetScalarType<T[P], AggregateInsuranceCompany[P]>
  }




  export type InsuranceCompanyGroupByArgs = {
    where?: InsuranceCompanyWhereInput
    orderBy?: Enumerable<InsuranceCompanyOrderByWithAggregationInput>
    by: Array<InsuranceCompanyScalarFieldEnum>
    having?: InsuranceCompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsuranceCompanyCountAggregateInputType | true
    _avg?: InsuranceCompanyAvgAggregateInputType
    _sum?: InsuranceCompanySumAggregateInputType
    _min?: InsuranceCompanyMinAggregateInputType
    _max?: InsuranceCompanyMaxAggregateInputType
  }


  export type InsuranceCompanyGroupByOutputType = {
    id: string
    number: number
    name: string
    _count: InsuranceCompanyCountAggregateOutputType | null
    _avg: InsuranceCompanyAvgAggregateOutputType | null
    _sum: InsuranceCompanySumAggregateOutputType | null
    _min: InsuranceCompanyMinAggregateOutputType | null
    _max: InsuranceCompanyMaxAggregateOutputType | null
  }

  type GetInsuranceCompanyGroupByPayload<T extends InsuranceCompanyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InsuranceCompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsuranceCompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsuranceCompanyGroupByOutputType[P]>
            : GetScalarType<T[P], InsuranceCompanyGroupByOutputType[P]>
        }
      >
    >


  export type InsuranceCompanySelect = {
    id?: boolean
    number?: boolean
    name?: boolean
    persons?: boolean | PersonFindManyArgs
    _count?: boolean | InsuranceCompanyCountOutputTypeArgs
  }

  export type InsuranceCompanyInclude = {
    persons?: boolean | PersonFindManyArgs
    _count?: boolean | InsuranceCompanyCountOutputTypeArgs
  }

  export type InsuranceCompanyGetPayload<
    S extends boolean | null | undefined | InsuranceCompanyArgs,
    U = keyof S
      > = S extends true
        ? InsuranceCompany
    : S extends undefined
    ? never
    : S extends InsuranceCompanyArgs | InsuranceCompanyFindManyArgs
    ?'include' extends U
    ? InsuranceCompany  & {
    [P in TrueKeys<S['include']>]:
        P extends 'persons' ? Array < PersonGetPayload<S['include'][P]>>  :
        P extends '_count' ? InsuranceCompanyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'persons' ? Array < PersonGetPayload<S['select'][P]>>  :
        P extends '_count' ? InsuranceCompanyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof InsuranceCompany ? InsuranceCompany[P] : never
  } 
    : InsuranceCompany
  : InsuranceCompany


  type InsuranceCompanyCountArgs = Merge<
    Omit<InsuranceCompanyFindManyArgs, 'select' | 'include'> & {
      select?: InsuranceCompanyCountAggregateInputType | true
    }
  >

  export interface InsuranceCompanyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InsuranceCompany that matches the filter.
     * @param {InsuranceCompanyFindUniqueArgs} args - Arguments to find a InsuranceCompany
     * @example
     * // Get one InsuranceCompany
     * const insuranceCompany = await prisma.insuranceCompany.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InsuranceCompanyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InsuranceCompanyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InsuranceCompany'> extends True ? CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany>, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T>>> : CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany | null >, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T> | null >>

    /**
     * Find the first InsuranceCompany that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCompanyFindFirstArgs} args - Arguments to find a InsuranceCompany
     * @example
     * // Get one InsuranceCompany
     * const insuranceCompany = await prisma.insuranceCompany.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InsuranceCompanyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InsuranceCompanyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InsuranceCompany'> extends True ? CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany>, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T>>> : CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany | null >, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T> | null >>

    /**
     * Find zero or more InsuranceCompanies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InsuranceCompanies
     * const insuranceCompanies = await prisma.insuranceCompany.findMany()
     * 
     * // Get first 10 InsuranceCompanies
     * const insuranceCompanies = await prisma.insuranceCompany.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insuranceCompanyWithIdOnly = await prisma.insuranceCompany.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InsuranceCompanyFindManyArgs>(
      args?: SelectSubset<T, InsuranceCompanyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InsuranceCompany>>, PrismaPromise<Array<InsuranceCompanyGetPayload<T>>>>

    /**
     * Create a InsuranceCompany.
     * @param {InsuranceCompanyCreateArgs} args - Arguments to create a InsuranceCompany.
     * @example
     * // Create one InsuranceCompany
     * const InsuranceCompany = await prisma.insuranceCompany.create({
     *   data: {
     *     // ... data to create a InsuranceCompany
     *   }
     * })
     * 
    **/
    create<T extends InsuranceCompanyCreateArgs>(
      args: SelectSubset<T, InsuranceCompanyCreateArgs>
    ): CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany>, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T>>>

    /**
     * Delete a InsuranceCompany.
     * @param {InsuranceCompanyDeleteArgs} args - Arguments to delete one InsuranceCompany.
     * @example
     * // Delete one InsuranceCompany
     * const InsuranceCompany = await prisma.insuranceCompany.delete({
     *   where: {
     *     // ... filter to delete one InsuranceCompany
     *   }
     * })
     * 
    **/
    delete<T extends InsuranceCompanyDeleteArgs>(
      args: SelectSubset<T, InsuranceCompanyDeleteArgs>
    ): CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany>, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T>>>

    /**
     * Update one InsuranceCompany.
     * @param {InsuranceCompanyUpdateArgs} args - Arguments to update one InsuranceCompany.
     * @example
     * // Update one InsuranceCompany
     * const insuranceCompany = await prisma.insuranceCompany.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InsuranceCompanyUpdateArgs>(
      args: SelectSubset<T, InsuranceCompanyUpdateArgs>
    ): CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany>, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T>>>

    /**
     * Delete zero or more InsuranceCompanies.
     * @param {InsuranceCompanyDeleteManyArgs} args - Arguments to filter InsuranceCompanies to delete.
     * @example
     * // Delete a few InsuranceCompanies
     * const { count } = await prisma.insuranceCompany.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InsuranceCompanyDeleteManyArgs>(
      args?: SelectSubset<T, InsuranceCompanyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InsuranceCompanies
     * const insuranceCompany = await prisma.insuranceCompany.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InsuranceCompanyUpdateManyArgs>(
      args: SelectSubset<T, InsuranceCompanyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InsuranceCompany.
     * @param {InsuranceCompanyUpsertArgs} args - Arguments to update or create a InsuranceCompany.
     * @example
     * // Update or create a InsuranceCompany
     * const insuranceCompany = await prisma.insuranceCompany.upsert({
     *   create: {
     *     // ... data to create a InsuranceCompany
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InsuranceCompany we want to update
     *   }
     * })
    **/
    upsert<T extends InsuranceCompanyUpsertArgs>(
      args: SelectSubset<T, InsuranceCompanyUpsertArgs>
    ): CheckSelect<T, Prisma__InsuranceCompanyClient<InsuranceCompany>, Prisma__InsuranceCompanyClient<InsuranceCompanyGetPayload<T>>>

    /**
     * Count the number of InsuranceCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCompanyCountArgs} args - Arguments to filter InsuranceCompanies to count.
     * @example
     * // Count the number of InsuranceCompanies
     * const count = await prisma.insuranceCompany.count({
     *   where: {
     *     // ... the filter for the InsuranceCompanies we want to count
     *   }
     * })
    **/
    count<T extends InsuranceCompanyCountArgs>(
      args?: Subset<T, InsuranceCompanyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsuranceCompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InsuranceCompany.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsuranceCompanyAggregateArgs>(args: Subset<T, InsuranceCompanyAggregateArgs>): PrismaPromise<GetInsuranceCompanyAggregateType<T>>

    /**
     * Group by InsuranceCompany.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsuranceCompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsuranceCompanyGroupByArgs['orderBy'] }
        : { orderBy?: InsuranceCompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsuranceCompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceCompanyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InsuranceCompany.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InsuranceCompanyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    persons<T extends PersonFindManyArgs = {}>(args?: Subset<T, PersonFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Person>>, PrismaPromise<Array<PersonGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InsuranceCompany findUnique
   */
  export type InsuranceCompanyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * Throw an Error if a InsuranceCompany can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InsuranceCompany to fetch.
     * 
    **/
    where: InsuranceCompanyWhereUniqueInput
  }


  /**
   * InsuranceCompany findFirst
   */
  export type InsuranceCompanyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * Throw an Error if a InsuranceCompany can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InsuranceCompany to fetch.
     * 
    **/
    where?: InsuranceCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceCompanies to fetch.
     * 
    **/
    orderBy?: Enumerable<InsuranceCompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceCompanies.
     * 
    **/
    cursor?: InsuranceCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceCompanies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceCompanies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceCompanies.
     * 
    **/
    distinct?: Enumerable<InsuranceCompanyScalarFieldEnum>
  }


  /**
   * InsuranceCompany findMany
   */
  export type InsuranceCompanyFindManyArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * Filter, which InsuranceCompanies to fetch.
     * 
    **/
    where?: InsuranceCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceCompanies to fetch.
     * 
    **/
    orderBy?: Enumerable<InsuranceCompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InsuranceCompanies.
     * 
    **/
    cursor?: InsuranceCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceCompanies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceCompanies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InsuranceCompanyScalarFieldEnum>
  }


  /**
   * InsuranceCompany create
   */
  export type InsuranceCompanyCreateArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * The data needed to create a InsuranceCompany.
     * 
    **/
    data: XOR<InsuranceCompanyCreateInput, InsuranceCompanyUncheckedCreateInput>
  }


  /**
   * InsuranceCompany update
   */
  export type InsuranceCompanyUpdateArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * The data needed to update a InsuranceCompany.
     * 
    **/
    data: XOR<InsuranceCompanyUpdateInput, InsuranceCompanyUncheckedUpdateInput>
    /**
     * Choose, which InsuranceCompany to update.
     * 
    **/
    where: InsuranceCompanyWhereUniqueInput
  }


  /**
   * InsuranceCompany updateMany
   */
  export type InsuranceCompanyUpdateManyArgs = {
    /**
     * The data used to update InsuranceCompanies.
     * 
    **/
    data: XOR<InsuranceCompanyUpdateManyMutationInput, InsuranceCompanyUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceCompanies to update
     * 
    **/
    where?: InsuranceCompanyWhereInput
  }


  /**
   * InsuranceCompany upsert
   */
  export type InsuranceCompanyUpsertArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * The filter to search for the InsuranceCompany to update in case it exists.
     * 
    **/
    where: InsuranceCompanyWhereUniqueInput
    /**
     * In case the InsuranceCompany found by the `where` argument doesn't exist, create a new InsuranceCompany with this data.
     * 
    **/
    create: XOR<InsuranceCompanyCreateInput, InsuranceCompanyUncheckedCreateInput>
    /**
     * In case the InsuranceCompany was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InsuranceCompanyUpdateInput, InsuranceCompanyUncheckedUpdateInput>
  }


  /**
   * InsuranceCompany delete
   */
  export type InsuranceCompanyDeleteArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
    /**
     * Filter which InsuranceCompany to delete.
     * 
    **/
    where: InsuranceCompanyWhereUniqueInput
  }


  /**
   * InsuranceCompany deleteMany
   */
  export type InsuranceCompanyDeleteManyArgs = {
    /**
     * Filter which InsuranceCompanies to delete
     * 
    **/
    where?: InsuranceCompanyWhereInput
  }


  /**
   * InsuranceCompany without action
   */
  export type InsuranceCompanyArgs = {
    /**
     * Select specific fields to fetch from the InsuranceCompany
     * 
    **/
    select?: InsuranceCompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InsuranceCompanyInclude | null
  }



  /**
   * Model Address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    postalCode: number | null
  }

  export type AddressSumAggregateOutputType = {
    postalCode: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    country: string | null
    city: string | null
    postalCode: number | null
    street: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    country: string | null
    city: string | null
    postalCode: number | null
    street: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    country: number
    city: number
    postalCode: number
    street: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    postalCode?: true
  }

  export type AddressSumAggregateInputType = {
    postalCode?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    country?: true
    city?: true
    postalCode?: true
    street?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    country?: true
    city?: true
    postalCode?: true
    street?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    country?: true
    city?: true
    postalCode?: true
    street?: true
    _all?: true
  }

  export type AddressAggregateArgs = {
    /**
     * Filter which Address to aggregate.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs = {
    where?: AddressWhereInput
    orderBy?: Enumerable<AddressOrderByWithAggregationInput>
    by: Array<AddressScalarFieldEnum>
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    id: string
    country: string
    city: string
    postalCode: number
    street: string
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect = {
    id?: boolean
    country?: boolean
    city?: boolean
    postalCode?: boolean
    street?: boolean
    person?: boolean | PersonArgs
    doctor?: boolean | DoctorArgs
  }

  export type AddressInclude = {
    person?: boolean | PersonArgs
    doctor?: boolean | DoctorArgs
  }

  export type AddressGetPayload<
    S extends boolean | null | undefined | AddressArgs,
    U = keyof S
      > = S extends true
        ? Address
    : S extends undefined
    ? never
    : S extends AddressArgs | AddressFindManyArgs
    ?'include' extends U
    ? Address  & {
    [P in TrueKeys<S['include']>]:
        P extends 'person' ? PersonGetPayload<S['include'][P]> | null :
        P extends 'doctor' ? DoctorGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'person' ? PersonGetPayload<S['select'][P]> | null :
        P extends 'doctor' ? DoctorGetPayload<S['select'][P]> | null :  P extends keyof Address ? Address[P] : never
  } 
    : Address
  : Address


  type AddressCountArgs = Merge<
    Omit<AddressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }
  >

  export interface AddressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Address'> extends True ? CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>> : CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Address'> extends True ? CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>> : CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs>(
      args?: SelectSubset<T, AddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Address>>, PrismaPromise<Array<AddressGetPayload<T>>>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs>(
      args: SelectSubset<T, AddressCreateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs>(
      args: SelectSubset<T, AddressDeleteArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs>(
      args: SelectSubset<T, AddressUpdateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs>(
      args?: SelectSubset<T, AddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs>(
      args: SelectSubset<T, AddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs>(
      args: SelectSubset<T, AddressUpsertArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AddressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null >, Prisma__PersonClient<PersonGetPayload<T> | null >>;

    doctor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Throw an Error if a Address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Throw an Error if a Address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     * 
    **/
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Addresses to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address create
   */
  export type AddressCreateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to create a Address.
     * 
    **/
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to update a Address.
     * 
    **/
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs = {
    /**
     * The data used to update Addresses.
     * 
    **/
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The filter to search for the Address to update in case it exists.
     * 
    **/
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     * 
    **/
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter which Address to delete.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs = {
    /**
     * Filter which Addresses to delete
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address without action
   */
  export type AddressArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
  }



  /**
   * Model Reservation
   */


  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationMinAggregateOutputType = {
    id: string | null
    personId: string | null
    doctorId: string | null
    from: Date | null
    personComment: string | null
    doctorComment: string | null
    created: Date | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: string | null
    personId: string | null
    doctorId: string | null
    from: Date | null
    personComment: string | null
    doctorComment: string | null
    created: Date | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    personId: number
    doctorId: number
    from: number
    personComment: number
    doctorComment: number
    created: number
    _all: number
  }


  export type ReservationMinAggregateInputType = {
    id?: true
    personId?: true
    doctorId?: true
    from?: true
    personComment?: true
    doctorComment?: true
    created?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    personId?: true
    doctorId?: true
    from?: true
    personComment?: true
    doctorComment?: true
    created?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    personId?: true
    doctorId?: true
    from?: true
    personComment?: true
    doctorComment?: true
    created?: true
    _all?: true
  }

  export type ReservationAggregateArgs = {
    /**
     * Filter which Reservation to aggregate.
     * 
    **/
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     * 
    **/
    orderBy?: Enumerable<ReservationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs = {
    where?: ReservationWhereInput
    orderBy?: Enumerable<ReservationOrderByWithAggregationInput>
    by: Array<ReservationScalarFieldEnum>
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }


  export type ReservationGroupByOutputType = {
    id: string
    personId: string
    doctorId: string
    from: Date
    personComment: string
    doctorComment: string
    created: Date
    _count: ReservationCountAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect = {
    id?: boolean
    personId?: boolean
    person?: boolean | PersonArgs
    doctorId?: boolean
    doctor?: boolean | DoctorArgs
    from?: boolean
    personComment?: boolean
    doctorComment?: boolean
    created?: boolean
  }

  export type ReservationInclude = {
    person?: boolean | PersonArgs
    doctor?: boolean | DoctorArgs
  }

  export type ReservationGetPayload<
    S extends boolean | null | undefined | ReservationArgs,
    U = keyof S
      > = S extends true
        ? Reservation
    : S extends undefined
    ? never
    : S extends ReservationArgs | ReservationFindManyArgs
    ?'include' extends U
    ? Reservation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'person' ? PersonGetPayload<S['include'][P]> :
        P extends 'doctor' ? DoctorGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'person' ? PersonGetPayload<S['select'][P]> :
        P extends 'doctor' ? DoctorGetPayload<S['select'][P]> :  P extends keyof Reservation ? Reservation[P] : never
  } 
    : Reservation
  : Reservation


  type ReservationCountArgs = Merge<
    Omit<ReservationFindManyArgs, 'select' | 'include'> & {
      select?: ReservationCountAggregateInputType | true
    }
  >

  export interface ReservationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReservationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reservation'> extends True ? CheckSelect<T, Prisma__ReservationClient<Reservation>, Prisma__ReservationClient<ReservationGetPayload<T>>> : CheckSelect<T, Prisma__ReservationClient<Reservation | null >, Prisma__ReservationClient<ReservationGetPayload<T> | null >>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReservationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reservation'> extends True ? CheckSelect<T, Prisma__ReservationClient<Reservation>, Prisma__ReservationClient<ReservationGetPayload<T>>> : CheckSelect<T, Prisma__ReservationClient<Reservation | null >, Prisma__ReservationClient<ReservationGetPayload<T> | null >>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReservationFindManyArgs>(
      args?: SelectSubset<T, ReservationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Reservation>>, PrismaPromise<Array<ReservationGetPayload<T>>>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
    **/
    create<T extends ReservationCreateArgs>(
      args: SelectSubset<T, ReservationCreateArgs>
    ): CheckSelect<T, Prisma__ReservationClient<Reservation>, Prisma__ReservationClient<ReservationGetPayload<T>>>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
    **/
    delete<T extends ReservationDeleteArgs>(
      args: SelectSubset<T, ReservationDeleteArgs>
    ): CheckSelect<T, Prisma__ReservationClient<Reservation>, Prisma__ReservationClient<ReservationGetPayload<T>>>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservationUpdateArgs>(
      args: SelectSubset<T, ReservationUpdateArgs>
    ): CheckSelect<T, Prisma__ReservationClient<Reservation>, Prisma__ReservationClient<ReservationGetPayload<T>>>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservationDeleteManyArgs>(
      args?: SelectSubset<T, ReservationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservationUpdateManyArgs>(
      args: SelectSubset<T, ReservationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
    **/
    upsert<T extends ReservationUpsertArgs>(
      args: SelectSubset<T, ReservationUpsertArgs>
    ): CheckSelect<T, Prisma__ReservationClient<Reservation>, Prisma__ReservationClient<ReservationGetPayload<T>>>

    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReservationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null >, Prisma__PersonClient<PersonGetPayload<T> | null >>;

    doctor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * Throw an Error if a Reservation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reservation to fetch.
     * 
    **/
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * Throw an Error if a Reservation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reservation to fetch.
     * 
    **/
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     * 
    **/
    orderBy?: Enumerable<ReservationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     * 
    **/
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     * 
    **/
    distinct?: Enumerable<ReservationScalarFieldEnum>
  }


  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * Filter, which Reservations to fetch.
     * 
    **/
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     * 
    **/
    orderBy?: Enumerable<ReservationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     * 
    **/
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReservationScalarFieldEnum>
  }


  /**
   * Reservation create
   */
  export type ReservationCreateArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * The data needed to create a Reservation.
     * 
    **/
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }


  /**
   * Reservation update
   */
  export type ReservationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * The data needed to update a Reservation.
     * 
    **/
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     * 
    **/
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs = {
    /**
     * The data used to update Reservations.
     * 
    **/
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     * 
    **/
    where?: ReservationWhereInput
  }


  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     * 
    **/
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     * 
    **/
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }


  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
    /**
     * Filter which Reservation to delete.
     * 
    **/
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs = {
    /**
     * Filter which Reservations to delete
     * 
    **/
    where?: ReservationWhereInput
  }


  /**
   * Reservation without action
   */
  export type ReservationArgs = {
    /**
     * Select specific fields to fetch from the Reservation
     * 
    **/
    select?: ReservationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReservationInclude | null
  }



  /**
   * Model Doctor
   */


  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    specialization: string | null
    actuality: string | null
    email: string | null
    phone: string | null
    description: string | null
    link: string | null
    profilePicture: string | null
    addressId: string | null
    personId: string | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    specialization: string | null
    actuality: string | null
    email: string | null
    phone: string | null
    description: string | null
    link: string | null
    profilePicture: string | null
    addressId: string | null
    personId: string | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    specialization: number
    actuality: number
    email: number
    phone: number
    description: number
    link: number
    profilePicture: number
    addressId: number
    personId: number
    _all: number
  }


  export type DoctorMinAggregateInputType = {
    id?: true
    specialization?: true
    actuality?: true
    email?: true
    phone?: true
    description?: true
    link?: true
    profilePicture?: true
    addressId?: true
    personId?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    specialization?: true
    actuality?: true
    email?: true
    phone?: true
    description?: true
    link?: true
    profilePicture?: true
    addressId?: true
    personId?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    specialization?: true
    actuality?: true
    email?: true
    phone?: true
    description?: true
    link?: true
    profilePicture?: true
    addressId?: true
    personId?: true
    _all?: true
  }

  export type DoctorAggregateArgs = {
    /**
     * Filter which Doctor to aggregate.
     * 
    **/
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs = {
    where?: DoctorWhereInput
    orderBy?: Enumerable<DoctorOrderByWithAggregationInput>
    by: Array<DoctorScalarFieldEnum>
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }


  export type DoctorGroupByOutputType = {
    id: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    personId: string
    _count: DoctorCountAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect = {
    id?: boolean
    specialization?: boolean
    actuality?: boolean
    email?: boolean
    phone?: boolean
    description?: boolean
    link?: boolean
    profilePicture?: boolean
    addressId?: boolean
    address?: boolean | AddressArgs
    personId?: boolean
    person?: boolean | PersonArgs
    reservations?: boolean | ReservationFindManyArgs
    references?: boolean | ReferenceFindManyArgs
    languages?: boolean | DoctorLanguageFindManyArgs
    openingHours?: boolean | OpeningHoursFindManyArgs
    _count?: boolean | DoctorCountOutputTypeArgs
  }

  export type DoctorInclude = {
    address?: boolean | AddressArgs
    person?: boolean | PersonArgs
    reservations?: boolean | ReservationFindManyArgs
    references?: boolean | ReferenceFindManyArgs
    languages?: boolean | DoctorLanguageFindManyArgs
    openingHours?: boolean | OpeningHoursFindManyArgs
    _count?: boolean | DoctorCountOutputTypeArgs
  }

  export type DoctorGetPayload<
    S extends boolean | null | undefined | DoctorArgs,
    U = keyof S
      > = S extends true
        ? Doctor
    : S extends undefined
    ? never
    : S extends DoctorArgs | DoctorFindManyArgs
    ?'include' extends U
    ? Doctor  & {
    [P in TrueKeys<S['include']>]:
        P extends 'address' ? AddressGetPayload<S['include'][P]> :
        P extends 'person' ? PersonGetPayload<S['include'][P]> :
        P extends 'reservations' ? Array < ReservationGetPayload<S['include'][P]>>  :
        P extends 'references' ? Array < ReferenceGetPayload<S['include'][P]>>  :
        P extends 'languages' ? Array < DoctorLanguageGetPayload<S['include'][P]>>  :
        P extends 'openingHours' ? Array < OpeningHoursGetPayload<S['include'][P]>>  :
        P extends '_count' ? DoctorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'address' ? AddressGetPayload<S['select'][P]> :
        P extends 'person' ? PersonGetPayload<S['select'][P]> :
        P extends 'reservations' ? Array < ReservationGetPayload<S['select'][P]>>  :
        P extends 'references' ? Array < ReferenceGetPayload<S['select'][P]>>  :
        P extends 'languages' ? Array < DoctorLanguageGetPayload<S['select'][P]>>  :
        P extends 'openingHours' ? Array < OpeningHoursGetPayload<S['select'][P]>>  :
        P extends '_count' ? DoctorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Doctor ? Doctor[P] : never
  } 
    : Doctor
  : Doctor


  type DoctorCountArgs = Merge<
    Omit<DoctorFindManyArgs, 'select' | 'include'> & {
      select?: DoctorCountAggregateInputType | true
    }
  >

  export interface DoctorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DoctorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Doctor'> extends True ? CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>> : CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DoctorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Doctor'> extends True ? CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>> : CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorFindManyArgs>(
      args?: SelectSubset<T, DoctorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Doctor>>, PrismaPromise<Array<DoctorGetPayload<T>>>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
    **/
    create<T extends DoctorCreateArgs>(
      args: SelectSubset<T, DoctorCreateArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
    **/
    delete<T extends DoctorDeleteArgs>(
      args: SelectSubset<T, DoctorDeleteArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorUpdateArgs>(
      args: SelectSubset<T, DoctorUpdateArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorDeleteManyArgs>(
      args?: SelectSubset<T, DoctorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorUpdateManyArgs>(
      args: SelectSubset<T, DoctorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorUpsertArgs>(
      args: SelectSubset<T, DoctorUpsertArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DoctorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends AddressArgs = {}>(args?: Subset<T, AddressArgs>): CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>;

    person<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null >, Prisma__PersonClient<PersonGetPayload<T> | null >>;

    reservations<T extends ReservationFindManyArgs = {}>(args?: Subset<T, ReservationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Reservation>>, PrismaPromise<Array<ReservationGetPayload<T>>>>;

    references<T extends ReferenceFindManyArgs = {}>(args?: Subset<T, ReferenceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Reference>>, PrismaPromise<Array<ReferenceGetPayload<T>>>>;

    languages<T extends DoctorLanguageFindManyArgs = {}>(args?: Subset<T, DoctorLanguageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DoctorLanguage>>, PrismaPromise<Array<DoctorLanguageGetPayload<T>>>>;

    openingHours<T extends OpeningHoursFindManyArgs = {}>(args?: Subset<T, OpeningHoursFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OpeningHours>>, PrismaPromise<Array<OpeningHoursGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Throw an Error if a Doctor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Doctor to fetch.
     * 
    **/
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Throw an Error if a Doctor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Doctor to fetch.
     * 
    **/
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     * 
    **/
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     * 
    **/
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Filter, which Doctors to fetch.
     * 
    **/
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     * 
    **/
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Doctor create
   */
  export type DoctorCreateArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * The data needed to create a Doctor.
     * 
    **/
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }


  /**
   * Doctor update
   */
  export type DoctorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * The data needed to update a Doctor.
     * 
    **/
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     * 
    **/
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs = {
    /**
     * The data used to update Doctors.
     * 
    **/
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     * 
    **/
    where?: DoctorWhereInput
  }


  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     * 
    **/
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     * 
    **/
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }


  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Filter which Doctor to delete.
     * 
    **/
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs = {
    /**
     * Filter which Doctors to delete
     * 
    **/
    where?: DoctorWhereInput
  }


  /**
   * Doctor without action
   */
  export type DoctorArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
  }



  /**
   * Model Reference
   */


  export type AggregateReference = {
    _count: ReferenceCountAggregateOutputType | null
    _avg: ReferenceAvgAggregateOutputType | null
    _sum: ReferenceSumAggregateOutputType | null
    _min: ReferenceMinAggregateOutputType | null
    _max: ReferenceMaxAggregateOutputType | null
  }

  export type ReferenceAvgAggregateOutputType = {
    rate: number | null
  }

  export type ReferenceSumAggregateOutputType = {
    rate: number | null
  }

  export type ReferenceMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    comment: string | null
    rate: number | null
    author: string | null
    doctor_comment: string | null
    created: Date | null
  }

  export type ReferenceMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    comment: string | null
    rate: number | null
    author: string | null
    doctor_comment: string | null
    created: Date | null
  }

  export type ReferenceCountAggregateOutputType = {
    id: number
    doctorId: number
    comment: number
    rate: number
    author: number
    doctor_comment: number
    created: number
    _all: number
  }


  export type ReferenceAvgAggregateInputType = {
    rate?: true
  }

  export type ReferenceSumAggregateInputType = {
    rate?: true
  }

  export type ReferenceMinAggregateInputType = {
    id?: true
    doctorId?: true
    comment?: true
    rate?: true
    author?: true
    doctor_comment?: true
    created?: true
  }

  export type ReferenceMaxAggregateInputType = {
    id?: true
    doctorId?: true
    comment?: true
    rate?: true
    author?: true
    doctor_comment?: true
    created?: true
  }

  export type ReferenceCountAggregateInputType = {
    id?: true
    doctorId?: true
    comment?: true
    rate?: true
    author?: true
    doctor_comment?: true
    created?: true
    _all?: true
  }

  export type ReferenceAggregateArgs = {
    /**
     * Filter which Reference to aggregate.
     * 
    **/
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     * 
    **/
    orderBy?: Enumerable<ReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned References
    **/
    _count?: true | ReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferenceMaxAggregateInputType
  }

  export type GetReferenceAggregateType<T extends ReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReference[P]>
      : GetScalarType<T[P], AggregateReference[P]>
  }




  export type ReferenceGroupByArgs = {
    where?: ReferenceWhereInput
    orderBy?: Enumerable<ReferenceOrderByWithAggregationInput>
    by: Array<ReferenceScalarFieldEnum>
    having?: ReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferenceCountAggregateInputType | true
    _avg?: ReferenceAvgAggregateInputType
    _sum?: ReferenceSumAggregateInputType
    _min?: ReferenceMinAggregateInputType
    _max?: ReferenceMaxAggregateInputType
  }


  export type ReferenceGroupByOutputType = {
    id: string
    doctorId: string
    comment: string
    rate: number
    author: string
    doctor_comment: string
    created: Date
    _count: ReferenceCountAggregateOutputType | null
    _avg: ReferenceAvgAggregateOutputType | null
    _sum: ReferenceSumAggregateOutputType | null
    _min: ReferenceMinAggregateOutputType | null
    _max: ReferenceMaxAggregateOutputType | null
  }

  type GetReferenceGroupByPayload<T extends ReferenceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ReferenceGroupByOutputType[P]>
        }
      >
    >


  export type ReferenceSelect = {
    id?: boolean
    doctorId?: boolean
    doctor?: boolean | DoctorArgs
    comment?: boolean
    rate?: boolean
    author?: boolean
    doctor_comment?: boolean
    created?: boolean
  }

  export type ReferenceInclude = {
    doctor?: boolean | DoctorArgs
  }

  export type ReferenceGetPayload<
    S extends boolean | null | undefined | ReferenceArgs,
    U = keyof S
      > = S extends true
        ? Reference
    : S extends undefined
    ? never
    : S extends ReferenceArgs | ReferenceFindManyArgs
    ?'include' extends U
    ? Reference  & {
    [P in TrueKeys<S['include']>]:
        P extends 'doctor' ? DoctorGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'doctor' ? DoctorGetPayload<S['select'][P]> :  P extends keyof Reference ? Reference[P] : never
  } 
    : Reference
  : Reference


  type ReferenceCountArgs = Merge<
    Omit<ReferenceFindManyArgs, 'select' | 'include'> & {
      select?: ReferenceCountAggregateInputType | true
    }
  >

  export interface ReferenceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reference that matches the filter.
     * @param {ReferenceFindUniqueArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReferenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReferenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reference'> extends True ? CheckSelect<T, Prisma__ReferenceClient<Reference>, Prisma__ReferenceClient<ReferenceGetPayload<T>>> : CheckSelect<T, Prisma__ReferenceClient<Reference | null >, Prisma__ReferenceClient<ReferenceGetPayload<T> | null >>

    /**
     * Find the first Reference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindFirstArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReferenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReferenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reference'> extends True ? CheckSelect<T, Prisma__ReferenceClient<Reference>, Prisma__ReferenceClient<ReferenceGetPayload<T>>> : CheckSelect<T, Prisma__ReferenceClient<Reference | null >, Prisma__ReferenceClient<ReferenceGetPayload<T> | null >>

    /**
     * Find zero or more References that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all References
     * const references = await prisma.reference.findMany()
     * 
     * // Get first 10 References
     * const references = await prisma.reference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referenceWithIdOnly = await prisma.reference.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReferenceFindManyArgs>(
      args?: SelectSubset<T, ReferenceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Reference>>, PrismaPromise<Array<ReferenceGetPayload<T>>>>

    /**
     * Create a Reference.
     * @param {ReferenceCreateArgs} args - Arguments to create a Reference.
     * @example
     * // Create one Reference
     * const Reference = await prisma.reference.create({
     *   data: {
     *     // ... data to create a Reference
     *   }
     * })
     * 
    **/
    create<T extends ReferenceCreateArgs>(
      args: SelectSubset<T, ReferenceCreateArgs>
    ): CheckSelect<T, Prisma__ReferenceClient<Reference>, Prisma__ReferenceClient<ReferenceGetPayload<T>>>

    /**
     * Delete a Reference.
     * @param {ReferenceDeleteArgs} args - Arguments to delete one Reference.
     * @example
     * // Delete one Reference
     * const Reference = await prisma.reference.delete({
     *   where: {
     *     // ... filter to delete one Reference
     *   }
     * })
     * 
    **/
    delete<T extends ReferenceDeleteArgs>(
      args: SelectSubset<T, ReferenceDeleteArgs>
    ): CheckSelect<T, Prisma__ReferenceClient<Reference>, Prisma__ReferenceClient<ReferenceGetPayload<T>>>

    /**
     * Update one Reference.
     * @param {ReferenceUpdateArgs} args - Arguments to update one Reference.
     * @example
     * // Update one Reference
     * const reference = await prisma.reference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReferenceUpdateArgs>(
      args: SelectSubset<T, ReferenceUpdateArgs>
    ): CheckSelect<T, Prisma__ReferenceClient<Reference>, Prisma__ReferenceClient<ReferenceGetPayload<T>>>

    /**
     * Delete zero or more References.
     * @param {ReferenceDeleteManyArgs} args - Arguments to filter References to delete.
     * @example
     * // Delete a few References
     * const { count } = await prisma.reference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReferenceDeleteManyArgs>(
      args?: SelectSubset<T, ReferenceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more References.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many References
     * const reference = await prisma.reference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReferenceUpdateManyArgs>(
      args: SelectSubset<T, ReferenceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reference.
     * @param {ReferenceUpsertArgs} args - Arguments to update or create a Reference.
     * @example
     * // Update or create a Reference
     * const reference = await prisma.reference.upsert({
     *   create: {
     *     // ... data to create a Reference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reference we want to update
     *   }
     * })
    **/
    upsert<T extends ReferenceUpsertArgs>(
      args: SelectSubset<T, ReferenceUpsertArgs>
    ): CheckSelect<T, Prisma__ReferenceClient<Reference>, Prisma__ReferenceClient<ReferenceGetPayload<T>>>

    /**
     * Count the number of References.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceCountArgs} args - Arguments to filter References to count.
     * @example
     * // Count the number of References
     * const count = await prisma.reference.count({
     *   where: {
     *     // ... the filter for the References we want to count
     *   }
     * })
    **/
    count<T extends ReferenceCountArgs>(
      args?: Subset<T, ReferenceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferenceAggregateArgs>(args: Subset<T, ReferenceAggregateArgs>): PrismaPromise<GetReferenceAggregateType<T>>

    /**
     * Group by Reference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferenceGroupByArgs['orderBy'] }
        : { orderBy?: ReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferenceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReferenceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    doctor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Reference findUnique
   */
  export type ReferenceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * Throw an Error if a Reference can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reference to fetch.
     * 
    **/
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference findFirst
   */
  export type ReferenceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * Throw an Error if a Reference can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Reference to fetch.
     * 
    **/
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     * 
    **/
    orderBy?: Enumerable<ReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for References.
     * 
    **/
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of References.
     * 
    **/
    distinct?: Enumerable<ReferenceScalarFieldEnum>
  }


  /**
   * Reference findMany
   */
  export type ReferenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * Filter, which References to fetch.
     * 
    **/
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     * 
    **/
    orderBy?: Enumerable<ReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing References.
     * 
    **/
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReferenceScalarFieldEnum>
  }


  /**
   * Reference create
   */
  export type ReferenceCreateArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * The data needed to create a Reference.
     * 
    **/
    data: XOR<ReferenceCreateInput, ReferenceUncheckedCreateInput>
  }


  /**
   * Reference update
   */
  export type ReferenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * The data needed to update a Reference.
     * 
    **/
    data: XOR<ReferenceUpdateInput, ReferenceUncheckedUpdateInput>
    /**
     * Choose, which Reference to update.
     * 
    **/
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference updateMany
   */
  export type ReferenceUpdateManyArgs = {
    /**
     * The data used to update References.
     * 
    **/
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyInput>
    /**
     * Filter which References to update
     * 
    **/
    where?: ReferenceWhereInput
  }


  /**
   * Reference upsert
   */
  export type ReferenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * The filter to search for the Reference to update in case it exists.
     * 
    **/
    where: ReferenceWhereUniqueInput
    /**
     * In case the Reference found by the `where` argument doesn't exist, create a new Reference with this data.
     * 
    **/
    create: XOR<ReferenceCreateInput, ReferenceUncheckedCreateInput>
    /**
     * In case the Reference was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReferenceUpdateInput, ReferenceUncheckedUpdateInput>
  }


  /**
   * Reference delete
   */
  export type ReferenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
    /**
     * Filter which Reference to delete.
     * 
    **/
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference deleteMany
   */
  export type ReferenceDeleteManyArgs = {
    /**
     * Filter which References to delete
     * 
    **/
    where?: ReferenceWhereInput
  }


  /**
   * Reference without action
   */
  export type ReferenceArgs = {
    /**
     * Select specific fields to fetch from the Reference
     * 
    **/
    select?: ReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReferenceInclude | null
  }



  /**
   * Model DoctorLanguage
   */


  export type AggregateDoctorLanguage = {
    _count: DoctorLanguageCountAggregateOutputType | null
    _min: DoctorLanguageMinAggregateOutputType | null
    _max: DoctorLanguageMaxAggregateOutputType | null
  }

  export type DoctorLanguageMinAggregateOutputType = {
    doctorId: string | null
    language: string | null
  }

  export type DoctorLanguageMaxAggregateOutputType = {
    doctorId: string | null
    language: string | null
  }

  export type DoctorLanguageCountAggregateOutputType = {
    doctorId: number
    language: number
    _all: number
  }


  export type DoctorLanguageMinAggregateInputType = {
    doctorId?: true
    language?: true
  }

  export type DoctorLanguageMaxAggregateInputType = {
    doctorId?: true
    language?: true
  }

  export type DoctorLanguageCountAggregateInputType = {
    doctorId?: true
    language?: true
    _all?: true
  }

  export type DoctorLanguageAggregateArgs = {
    /**
     * Filter which DoctorLanguage to aggregate.
     * 
    **/
    where?: DoctorLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorLanguages to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorLanguageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DoctorLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorLanguages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorLanguages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorLanguages
    **/
    _count?: true | DoctorLanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorLanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorLanguageMaxAggregateInputType
  }

  export type GetDoctorLanguageAggregateType<T extends DoctorLanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorLanguage[P]>
      : GetScalarType<T[P], AggregateDoctorLanguage[P]>
  }




  export type DoctorLanguageGroupByArgs = {
    where?: DoctorLanguageWhereInput
    orderBy?: Enumerable<DoctorLanguageOrderByWithAggregationInput>
    by: Array<DoctorLanguageScalarFieldEnum>
    having?: DoctorLanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorLanguageCountAggregateInputType | true
    _min?: DoctorLanguageMinAggregateInputType
    _max?: DoctorLanguageMaxAggregateInputType
  }


  export type DoctorLanguageGroupByOutputType = {
    doctorId: string
    language: string
    _count: DoctorLanguageCountAggregateOutputType | null
    _min: DoctorLanguageMinAggregateOutputType | null
    _max: DoctorLanguageMaxAggregateOutputType | null
  }

  type GetDoctorLanguageGroupByPayload<T extends DoctorLanguageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DoctorLanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorLanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorLanguageGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorLanguageGroupByOutputType[P]>
        }
      >
    >


  export type DoctorLanguageSelect = {
    doctorId?: boolean
    doctor?: boolean | DoctorArgs
    language?: boolean
  }

  export type DoctorLanguageInclude = {
    doctor?: boolean | DoctorArgs
  }

  export type DoctorLanguageGetPayload<
    S extends boolean | null | undefined | DoctorLanguageArgs,
    U = keyof S
      > = S extends true
        ? DoctorLanguage
    : S extends undefined
    ? never
    : S extends DoctorLanguageArgs | DoctorLanguageFindManyArgs
    ?'include' extends U
    ? DoctorLanguage  & {
    [P in TrueKeys<S['include']>]:
        P extends 'doctor' ? DoctorGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'doctor' ? DoctorGetPayload<S['select'][P]> :  P extends keyof DoctorLanguage ? DoctorLanguage[P] : never
  } 
    : DoctorLanguage
  : DoctorLanguage


  type DoctorLanguageCountArgs = Merge<
    Omit<DoctorLanguageFindManyArgs, 'select' | 'include'> & {
      select?: DoctorLanguageCountAggregateInputType | true
    }
  >

  export interface DoctorLanguageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DoctorLanguage that matches the filter.
     * @param {DoctorLanguageFindUniqueArgs} args - Arguments to find a DoctorLanguage
     * @example
     * // Get one DoctorLanguage
     * const doctorLanguage = await prisma.doctorLanguage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorLanguageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DoctorLanguageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DoctorLanguage'> extends True ? CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage>, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T>>> : CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage | null >, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T> | null >>

    /**
     * Find the first DoctorLanguage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorLanguageFindFirstArgs} args - Arguments to find a DoctorLanguage
     * @example
     * // Get one DoctorLanguage
     * const doctorLanguage = await prisma.doctorLanguage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorLanguageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DoctorLanguageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DoctorLanguage'> extends True ? CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage>, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T>>> : CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage | null >, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T> | null >>

    /**
     * Find zero or more DoctorLanguages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorLanguageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorLanguages
     * const doctorLanguages = await prisma.doctorLanguage.findMany()
     * 
     * // Get first 10 DoctorLanguages
     * const doctorLanguages = await prisma.doctorLanguage.findMany({ take: 10 })
     * 
     * // Only select the `doctorId`
     * const doctorLanguageWithDoctorIdOnly = await prisma.doctorLanguage.findMany({ select: { doctorId: true } })
     * 
    **/
    findMany<T extends DoctorLanguageFindManyArgs>(
      args?: SelectSubset<T, DoctorLanguageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DoctorLanguage>>, PrismaPromise<Array<DoctorLanguageGetPayload<T>>>>

    /**
     * Create a DoctorLanguage.
     * @param {DoctorLanguageCreateArgs} args - Arguments to create a DoctorLanguage.
     * @example
     * // Create one DoctorLanguage
     * const DoctorLanguage = await prisma.doctorLanguage.create({
     *   data: {
     *     // ... data to create a DoctorLanguage
     *   }
     * })
     * 
    **/
    create<T extends DoctorLanguageCreateArgs>(
      args: SelectSubset<T, DoctorLanguageCreateArgs>
    ): CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage>, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T>>>

    /**
     * Delete a DoctorLanguage.
     * @param {DoctorLanguageDeleteArgs} args - Arguments to delete one DoctorLanguage.
     * @example
     * // Delete one DoctorLanguage
     * const DoctorLanguage = await prisma.doctorLanguage.delete({
     *   where: {
     *     // ... filter to delete one DoctorLanguage
     *   }
     * })
     * 
    **/
    delete<T extends DoctorLanguageDeleteArgs>(
      args: SelectSubset<T, DoctorLanguageDeleteArgs>
    ): CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage>, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T>>>

    /**
     * Update one DoctorLanguage.
     * @param {DoctorLanguageUpdateArgs} args - Arguments to update one DoctorLanguage.
     * @example
     * // Update one DoctorLanguage
     * const doctorLanguage = await prisma.doctorLanguage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorLanguageUpdateArgs>(
      args: SelectSubset<T, DoctorLanguageUpdateArgs>
    ): CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage>, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T>>>

    /**
     * Delete zero or more DoctorLanguages.
     * @param {DoctorLanguageDeleteManyArgs} args - Arguments to filter DoctorLanguages to delete.
     * @example
     * // Delete a few DoctorLanguages
     * const { count } = await prisma.doctorLanguage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorLanguageDeleteManyArgs>(
      args?: SelectSubset<T, DoctorLanguageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorLanguages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorLanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorLanguages
     * const doctorLanguage = await prisma.doctorLanguage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorLanguageUpdateManyArgs>(
      args: SelectSubset<T, DoctorLanguageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DoctorLanguage.
     * @param {DoctorLanguageUpsertArgs} args - Arguments to update or create a DoctorLanguage.
     * @example
     * // Update or create a DoctorLanguage
     * const doctorLanguage = await prisma.doctorLanguage.upsert({
     *   create: {
     *     // ... data to create a DoctorLanguage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorLanguage we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorLanguageUpsertArgs>(
      args: SelectSubset<T, DoctorLanguageUpsertArgs>
    ): CheckSelect<T, Prisma__DoctorLanguageClient<DoctorLanguage>, Prisma__DoctorLanguageClient<DoctorLanguageGetPayload<T>>>

    /**
     * Count the number of DoctorLanguages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorLanguageCountArgs} args - Arguments to filter DoctorLanguages to count.
     * @example
     * // Count the number of DoctorLanguages
     * const count = await prisma.doctorLanguage.count({
     *   where: {
     *     // ... the filter for the DoctorLanguages we want to count
     *   }
     * })
    **/
    count<T extends DoctorLanguageCountArgs>(
      args?: Subset<T, DoctorLanguageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorLanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorLanguage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorLanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorLanguageAggregateArgs>(args: Subset<T, DoctorLanguageAggregateArgs>): PrismaPromise<GetDoctorLanguageAggregateType<T>>

    /**
     * Group by DoctorLanguage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorLanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorLanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorLanguageGroupByArgs['orderBy'] }
        : { orderBy?: DoctorLanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorLanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorLanguageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorLanguage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DoctorLanguageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    doctor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DoctorLanguage findUnique
   */
  export type DoctorLanguageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * Throw an Error if a DoctorLanguage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DoctorLanguage to fetch.
     * 
    **/
    where: DoctorLanguageWhereUniqueInput
  }


  /**
   * DoctorLanguage findFirst
   */
  export type DoctorLanguageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * Throw an Error if a DoctorLanguage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DoctorLanguage to fetch.
     * 
    **/
    where?: DoctorLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorLanguages to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorLanguageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorLanguages.
     * 
    **/
    cursor?: DoctorLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorLanguages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorLanguages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorLanguages.
     * 
    **/
    distinct?: Enumerable<DoctorLanguageScalarFieldEnum>
  }


  /**
   * DoctorLanguage findMany
   */
  export type DoctorLanguageFindManyArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * Filter, which DoctorLanguages to fetch.
     * 
    **/
    where?: DoctorLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorLanguages to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorLanguageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorLanguages.
     * 
    **/
    cursor?: DoctorLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorLanguages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorLanguages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DoctorLanguageScalarFieldEnum>
  }


  /**
   * DoctorLanguage create
   */
  export type DoctorLanguageCreateArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * The data needed to create a DoctorLanguage.
     * 
    **/
    data: XOR<DoctorLanguageCreateInput, DoctorLanguageUncheckedCreateInput>
  }


  /**
   * DoctorLanguage update
   */
  export type DoctorLanguageUpdateArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * The data needed to update a DoctorLanguage.
     * 
    **/
    data: XOR<DoctorLanguageUpdateInput, DoctorLanguageUncheckedUpdateInput>
    /**
     * Choose, which DoctorLanguage to update.
     * 
    **/
    where: DoctorLanguageWhereUniqueInput
  }


  /**
   * DoctorLanguage updateMany
   */
  export type DoctorLanguageUpdateManyArgs = {
    /**
     * The data used to update DoctorLanguages.
     * 
    **/
    data: XOR<DoctorLanguageUpdateManyMutationInput, DoctorLanguageUncheckedUpdateManyInput>
    /**
     * Filter which DoctorLanguages to update
     * 
    **/
    where?: DoctorLanguageWhereInput
  }


  /**
   * DoctorLanguage upsert
   */
  export type DoctorLanguageUpsertArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * The filter to search for the DoctorLanguage to update in case it exists.
     * 
    **/
    where: DoctorLanguageWhereUniqueInput
    /**
     * In case the DoctorLanguage found by the `where` argument doesn't exist, create a new DoctorLanguage with this data.
     * 
    **/
    create: XOR<DoctorLanguageCreateInput, DoctorLanguageUncheckedCreateInput>
    /**
     * In case the DoctorLanguage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DoctorLanguageUpdateInput, DoctorLanguageUncheckedUpdateInput>
  }


  /**
   * DoctorLanguage delete
   */
  export type DoctorLanguageDeleteArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
    /**
     * Filter which DoctorLanguage to delete.
     * 
    **/
    where: DoctorLanguageWhereUniqueInput
  }


  /**
   * DoctorLanguage deleteMany
   */
  export type DoctorLanguageDeleteManyArgs = {
    /**
     * Filter which DoctorLanguages to delete
     * 
    **/
    where?: DoctorLanguageWhereInput
  }


  /**
   * DoctorLanguage without action
   */
  export type DoctorLanguageArgs = {
    /**
     * Select specific fields to fetch from the DoctorLanguage
     * 
    **/
    select?: DoctorLanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorLanguageInclude | null
  }



  /**
   * Model OpeningHours
   */


  export type AggregateOpeningHours = {
    _count: OpeningHoursCountAggregateOutputType | null
    _min: OpeningHoursMinAggregateOutputType | null
    _max: OpeningHoursMaxAggregateOutputType | null
  }

  export type OpeningHoursMinAggregateOutputType = {
    doctorId: string | null
    day: string | null
    fromTime: Date | null
    toTime: Date | null
    fromDate: Date | null
  }

  export type OpeningHoursMaxAggregateOutputType = {
    doctorId: string | null
    day: string | null
    fromTime: Date | null
    toTime: Date | null
    fromDate: Date | null
  }

  export type OpeningHoursCountAggregateOutputType = {
    doctorId: number
    day: number
    fromTime: number
    toTime: number
    fromDate: number
    _all: number
  }


  export type OpeningHoursMinAggregateInputType = {
    doctorId?: true
    day?: true
    fromTime?: true
    toTime?: true
    fromDate?: true
  }

  export type OpeningHoursMaxAggregateInputType = {
    doctorId?: true
    day?: true
    fromTime?: true
    toTime?: true
    fromDate?: true
  }

  export type OpeningHoursCountAggregateInputType = {
    doctorId?: true
    day?: true
    fromTime?: true
    toTime?: true
    fromDate?: true
    _all?: true
  }

  export type OpeningHoursAggregateArgs = {
    /**
     * Filter which OpeningHours to aggregate.
     * 
    **/
    where?: OpeningHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpeningHours to fetch.
     * 
    **/
    orderBy?: Enumerable<OpeningHoursOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OpeningHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpeningHours from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpeningHours.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpeningHours
    **/
    _count?: true | OpeningHoursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpeningHoursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpeningHoursMaxAggregateInputType
  }

  export type GetOpeningHoursAggregateType<T extends OpeningHoursAggregateArgs> = {
        [P in keyof T & keyof AggregateOpeningHours]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpeningHours[P]>
      : GetScalarType<T[P], AggregateOpeningHours[P]>
  }




  export type OpeningHoursGroupByArgs = {
    where?: OpeningHoursWhereInput
    orderBy?: Enumerable<OpeningHoursOrderByWithAggregationInput>
    by: Array<OpeningHoursScalarFieldEnum>
    having?: OpeningHoursScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpeningHoursCountAggregateInputType | true
    _min?: OpeningHoursMinAggregateInputType
    _max?: OpeningHoursMaxAggregateInputType
  }


  export type OpeningHoursGroupByOutputType = {
    doctorId: string
    day: string
    fromTime: Date
    toTime: Date
    fromDate: Date
    _count: OpeningHoursCountAggregateOutputType | null
    _min: OpeningHoursMinAggregateOutputType | null
    _max: OpeningHoursMaxAggregateOutputType | null
  }

  type GetOpeningHoursGroupByPayload<T extends OpeningHoursGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OpeningHoursGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpeningHoursGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpeningHoursGroupByOutputType[P]>
            : GetScalarType<T[P], OpeningHoursGroupByOutputType[P]>
        }
      >
    >


  export type OpeningHoursSelect = {
    doctorId?: boolean
    dostor?: boolean | DoctorArgs
    day?: boolean
    fromTime?: boolean
    toTime?: boolean
    fromDate?: boolean
  }

  export type OpeningHoursInclude = {
    dostor?: boolean | DoctorArgs
  }

  export type OpeningHoursGetPayload<
    S extends boolean | null | undefined | OpeningHoursArgs,
    U = keyof S
      > = S extends true
        ? OpeningHours
    : S extends undefined
    ? never
    : S extends OpeningHoursArgs | OpeningHoursFindManyArgs
    ?'include' extends U
    ? OpeningHours  & {
    [P in TrueKeys<S['include']>]:
        P extends 'dostor' ? DoctorGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'dostor' ? DoctorGetPayload<S['select'][P]> :  P extends keyof OpeningHours ? OpeningHours[P] : never
  } 
    : OpeningHours
  : OpeningHours


  type OpeningHoursCountArgs = Merge<
    Omit<OpeningHoursFindManyArgs, 'select' | 'include'> & {
      select?: OpeningHoursCountAggregateInputType | true
    }
  >

  export interface OpeningHoursDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OpeningHours that matches the filter.
     * @param {OpeningHoursFindUniqueArgs} args - Arguments to find a OpeningHours
     * @example
     * // Get one OpeningHours
     * const openingHours = await prisma.openingHours.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OpeningHoursFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OpeningHoursFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OpeningHours'> extends True ? CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours>, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T>>> : CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours | null >, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T> | null >>

    /**
     * Find the first OpeningHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpeningHoursFindFirstArgs} args - Arguments to find a OpeningHours
     * @example
     * // Get one OpeningHours
     * const openingHours = await prisma.openingHours.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OpeningHoursFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OpeningHoursFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OpeningHours'> extends True ? CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours>, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T>>> : CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours | null >, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T> | null >>

    /**
     * Find zero or more OpeningHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpeningHoursFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpeningHours
     * const openingHours = await prisma.openingHours.findMany()
     * 
     * // Get first 10 OpeningHours
     * const openingHours = await prisma.openingHours.findMany({ take: 10 })
     * 
     * // Only select the `doctorId`
     * const openingHoursWithDoctorIdOnly = await prisma.openingHours.findMany({ select: { doctorId: true } })
     * 
    **/
    findMany<T extends OpeningHoursFindManyArgs>(
      args?: SelectSubset<T, OpeningHoursFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OpeningHours>>, PrismaPromise<Array<OpeningHoursGetPayload<T>>>>

    /**
     * Create a OpeningHours.
     * @param {OpeningHoursCreateArgs} args - Arguments to create a OpeningHours.
     * @example
     * // Create one OpeningHours
     * const OpeningHours = await prisma.openingHours.create({
     *   data: {
     *     // ... data to create a OpeningHours
     *   }
     * })
     * 
    **/
    create<T extends OpeningHoursCreateArgs>(
      args: SelectSubset<T, OpeningHoursCreateArgs>
    ): CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours>, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T>>>

    /**
     * Delete a OpeningHours.
     * @param {OpeningHoursDeleteArgs} args - Arguments to delete one OpeningHours.
     * @example
     * // Delete one OpeningHours
     * const OpeningHours = await prisma.openingHours.delete({
     *   where: {
     *     // ... filter to delete one OpeningHours
     *   }
     * })
     * 
    **/
    delete<T extends OpeningHoursDeleteArgs>(
      args: SelectSubset<T, OpeningHoursDeleteArgs>
    ): CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours>, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T>>>

    /**
     * Update one OpeningHours.
     * @param {OpeningHoursUpdateArgs} args - Arguments to update one OpeningHours.
     * @example
     * // Update one OpeningHours
     * const openingHours = await prisma.openingHours.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OpeningHoursUpdateArgs>(
      args: SelectSubset<T, OpeningHoursUpdateArgs>
    ): CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours>, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T>>>

    /**
     * Delete zero or more OpeningHours.
     * @param {OpeningHoursDeleteManyArgs} args - Arguments to filter OpeningHours to delete.
     * @example
     * // Delete a few OpeningHours
     * const { count } = await prisma.openingHours.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OpeningHoursDeleteManyArgs>(
      args?: SelectSubset<T, OpeningHoursDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpeningHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpeningHoursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpeningHours
     * const openingHours = await prisma.openingHours.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OpeningHoursUpdateManyArgs>(
      args: SelectSubset<T, OpeningHoursUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OpeningHours.
     * @param {OpeningHoursUpsertArgs} args - Arguments to update or create a OpeningHours.
     * @example
     * // Update or create a OpeningHours
     * const openingHours = await prisma.openingHours.upsert({
     *   create: {
     *     // ... data to create a OpeningHours
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpeningHours we want to update
     *   }
     * })
    **/
    upsert<T extends OpeningHoursUpsertArgs>(
      args: SelectSubset<T, OpeningHoursUpsertArgs>
    ): CheckSelect<T, Prisma__OpeningHoursClient<OpeningHours>, Prisma__OpeningHoursClient<OpeningHoursGetPayload<T>>>

    /**
     * Count the number of OpeningHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpeningHoursCountArgs} args - Arguments to filter OpeningHours to count.
     * @example
     * // Count the number of OpeningHours
     * const count = await prisma.openingHours.count({
     *   where: {
     *     // ... the filter for the OpeningHours we want to count
     *   }
     * })
    **/
    count<T extends OpeningHoursCountArgs>(
      args?: Subset<T, OpeningHoursCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpeningHoursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpeningHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpeningHoursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpeningHoursAggregateArgs>(args: Subset<T, OpeningHoursAggregateArgs>): PrismaPromise<GetOpeningHoursAggregateType<T>>

    /**
     * Group by OpeningHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpeningHoursGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpeningHoursGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpeningHoursGroupByArgs['orderBy'] }
        : { orderBy?: OpeningHoursGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpeningHoursGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpeningHoursGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpeningHours.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OpeningHoursClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dostor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OpeningHours findUnique
   */
  export type OpeningHoursFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * Throw an Error if a OpeningHours can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OpeningHours to fetch.
     * 
    **/
    where: OpeningHoursWhereUniqueInput
  }


  /**
   * OpeningHours findFirst
   */
  export type OpeningHoursFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * Throw an Error if a OpeningHours can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OpeningHours to fetch.
     * 
    **/
    where?: OpeningHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpeningHours to fetch.
     * 
    **/
    orderBy?: Enumerable<OpeningHoursOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpeningHours.
     * 
    **/
    cursor?: OpeningHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpeningHours from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpeningHours.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpeningHours.
     * 
    **/
    distinct?: Enumerable<OpeningHoursScalarFieldEnum>
  }


  /**
   * OpeningHours findMany
   */
  export type OpeningHoursFindManyArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * Filter, which OpeningHours to fetch.
     * 
    **/
    where?: OpeningHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpeningHours to fetch.
     * 
    **/
    orderBy?: Enumerable<OpeningHoursOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpeningHours.
     * 
    **/
    cursor?: OpeningHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpeningHours from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpeningHours.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OpeningHoursScalarFieldEnum>
  }


  /**
   * OpeningHours create
   */
  export type OpeningHoursCreateArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * The data needed to create a OpeningHours.
     * 
    **/
    data: XOR<OpeningHoursCreateInput, OpeningHoursUncheckedCreateInput>
  }


  /**
   * OpeningHours update
   */
  export type OpeningHoursUpdateArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * The data needed to update a OpeningHours.
     * 
    **/
    data: XOR<OpeningHoursUpdateInput, OpeningHoursUncheckedUpdateInput>
    /**
     * Choose, which OpeningHours to update.
     * 
    **/
    where: OpeningHoursWhereUniqueInput
  }


  /**
   * OpeningHours updateMany
   */
  export type OpeningHoursUpdateManyArgs = {
    /**
     * The data used to update OpeningHours.
     * 
    **/
    data: XOR<OpeningHoursUpdateManyMutationInput, OpeningHoursUncheckedUpdateManyInput>
    /**
     * Filter which OpeningHours to update
     * 
    **/
    where?: OpeningHoursWhereInput
  }


  /**
   * OpeningHours upsert
   */
  export type OpeningHoursUpsertArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * The filter to search for the OpeningHours to update in case it exists.
     * 
    **/
    where: OpeningHoursWhereUniqueInput
    /**
     * In case the OpeningHours found by the `where` argument doesn't exist, create a new OpeningHours with this data.
     * 
    **/
    create: XOR<OpeningHoursCreateInput, OpeningHoursUncheckedCreateInput>
    /**
     * In case the OpeningHours was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OpeningHoursUpdateInput, OpeningHoursUncheckedUpdateInput>
  }


  /**
   * OpeningHours delete
   */
  export type OpeningHoursDeleteArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
    /**
     * Filter which OpeningHours to delete.
     * 
    **/
    where: OpeningHoursWhereUniqueInput
  }


  /**
   * OpeningHours deleteMany
   */
  export type OpeningHoursDeleteManyArgs = {
    /**
     * Filter which OpeningHours to delete
     * 
    **/
    where?: OpeningHoursWhereInput
  }


  /**
   * OpeningHours without action
   */
  export type OpeningHoursArgs = {
    /**
     * Select specific fields to fetch from the OpeningHours
     * 
    **/
    select?: OpeningHoursSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OpeningHoursInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const PersonScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    surename: 'surename',
    degree: 'degree',
    birthdate: 'birthdate',
    email: 'email',
    phone: 'phone',
    insuraceNumber: 'insuraceNumber',
    insuranceId: 'insuranceId',
    addressId: 'addressId',
    password: 'password'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const InsuranceCompanyScalarFieldEnum: {
    id: 'id',
    number: 'number',
    name: 'name'
  };

  export type InsuranceCompanyScalarFieldEnum = (typeof InsuranceCompanyScalarFieldEnum)[keyof typeof InsuranceCompanyScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    country: 'country',
    city: 'city',
    postalCode: 'postalCode',
    street: 'street'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    doctorId: 'doctorId',
    from: 'from',
    personComment: 'personComment',
    doctorComment: 'doctorComment',
    created: 'created'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    specialization: 'specialization',
    actuality: 'actuality',
    email: 'email',
    phone: 'phone',
    description: 'description',
    link: 'link',
    profilePicture: 'profilePicture',
    addressId: 'addressId',
    personId: 'personId'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const ReferenceScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    comment: 'comment',
    rate: 'rate',
    author: 'author',
    doctor_comment: 'doctor_comment',
    created: 'created'
  };

  export type ReferenceScalarFieldEnum = (typeof ReferenceScalarFieldEnum)[keyof typeof ReferenceScalarFieldEnum]


  export const DoctorLanguageScalarFieldEnum: {
    doctorId: 'doctorId',
    language: 'language'
  };

  export type DoctorLanguageScalarFieldEnum = (typeof DoctorLanguageScalarFieldEnum)[keyof typeof DoctorLanguageScalarFieldEnum]


  export const OpeningHoursScalarFieldEnum: {
    doctorId: 'doctorId',
    day: 'day',
    fromTime: 'fromTime',
    toTime: 'toTime',
    fromDate: 'fromDate'
  };

  export type OpeningHoursScalarFieldEnum = (typeof OpeningHoursScalarFieldEnum)[keyof typeof OpeningHoursScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type PersonWhereInput = {
    AND?: Enumerable<PersonWhereInput>
    OR?: Enumerable<PersonWhereInput>
    NOT?: Enumerable<PersonWhereInput>
    id?: StringFilter | string
    firstname?: StringFilter | string
    surename?: StringFilter | string
    degree?: StringFilter | string
    birthdate?: DateTimeFilter | Date | string
    email?: StringFilter | string
    phone?: IntFilter | number
    insuraceNumber?: IntFilter | number
    insuranceId?: StringFilter | string
    insurance?: XOR<InsuranceCompanyRelationFilter, InsuranceCompanyWhereInput>
    addressId?: StringFilter | string
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    password?: StringFilter | string
    reservations?: ReservationListRelationFilter
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput> | null
  }

  export type PersonOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    surename?: SortOrder
    degree?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    insuraceNumber?: SortOrder
    insuranceId?: SortOrder
    insurance?: InsuranceCompanyOrderByWithRelationInput
    addressId?: SortOrder
    address?: AddressOrderByWithRelationInput
    password?: SortOrder
    reservations?: ReservationOrderByRelationAggregateInput
    doctor?: DoctorOrderByWithRelationInput
  }

  export type PersonWhereUniqueInput = {
    id?: string
    addressId?: string
  }

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    surename?: SortOrder
    degree?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    insuraceNumber?: SortOrder
    insuranceId?: SortOrder
    addressId?: SortOrder
    password?: SortOrder
    _count?: PersonCountOrderByAggregateInput
    _avg?: PersonAvgOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
    _sum?: PersonSumOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PersonScalarWhereWithAggregatesInput>
    OR?: Enumerable<PersonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PersonScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    firstname?: StringWithAggregatesFilter | string
    surename?: StringWithAggregatesFilter | string
    degree?: StringWithAggregatesFilter | string
    birthdate?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    phone?: IntWithAggregatesFilter | number
    insuraceNumber?: IntWithAggregatesFilter | number
    insuranceId?: StringWithAggregatesFilter | string
    addressId?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type InsuranceCompanyWhereInput = {
    AND?: Enumerable<InsuranceCompanyWhereInput>
    OR?: Enumerable<InsuranceCompanyWhereInput>
    NOT?: Enumerable<InsuranceCompanyWhereInput>
    id?: StringFilter | string
    number?: IntFilter | number
    name?: StringFilter | string
    persons?: PersonListRelationFilter
  }

  export type InsuranceCompanyOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    persons?: PersonOrderByRelationAggregateInput
  }

  export type InsuranceCompanyWhereUniqueInput = {
    id?: string
  }

  export type InsuranceCompanyOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    _count?: InsuranceCompanyCountOrderByAggregateInput
    _avg?: InsuranceCompanyAvgOrderByAggregateInput
    _max?: InsuranceCompanyMaxOrderByAggregateInput
    _min?: InsuranceCompanyMinOrderByAggregateInput
    _sum?: InsuranceCompanySumOrderByAggregateInput
  }

  export type InsuranceCompanyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InsuranceCompanyScalarWhereWithAggregatesInput>
    OR?: Enumerable<InsuranceCompanyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InsuranceCompanyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    number?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type AddressWhereInput = {
    AND?: Enumerable<AddressWhereInput>
    OR?: Enumerable<AddressWhereInput>
    NOT?: Enumerable<AddressWhereInput>
    id?: StringFilter | string
    country?: StringFilter | string
    city?: StringFilter | string
    postalCode?: IntFilter | number
    street?: StringFilter | string
    person?: XOR<PersonRelationFilter, PersonWhereInput> | null
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput> | null
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    country?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    street?: SortOrder
    person?: PersonOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = {
    id?: string
  }

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    country?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    street?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<AddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AddressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    postalCode?: IntWithAggregatesFilter | number
    street?: StringWithAggregatesFilter | string
  }

  export type ReservationWhereInput = {
    AND?: Enumerable<ReservationWhereInput>
    OR?: Enumerable<ReservationWhereInput>
    NOT?: Enumerable<ReservationWhereInput>
    id?: StringFilter | string
    personId?: StringFilter | string
    person?: XOR<PersonRelationFilter, PersonWhereInput>
    doctorId?: StringFilter | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    from?: DateTimeFilter | Date | string
    personComment?: StringFilter | string
    doctorComment?: StringFilter | string
    created?: DateTimeFilter | Date | string
  }

  export type ReservationOrderByWithRelationInput = {
    id?: SortOrder
    personId?: SortOrder
    person?: PersonOrderByWithRelationInput
    doctorId?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    from?: SortOrder
    personComment?: SortOrder
    doctorComment?: SortOrder
    created?: SortOrder
  }

  export type ReservationWhereUniqueInput = {
    id?: string
  }

  export type ReservationOrderByWithAggregationInput = {
    id?: SortOrder
    personId?: SortOrder
    doctorId?: SortOrder
    from?: SortOrder
    personComment?: SortOrder
    doctorComment?: SortOrder
    created?: SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReservationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReservationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReservationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    personId?: StringWithAggregatesFilter | string
    doctorId?: StringWithAggregatesFilter | string
    from?: DateTimeWithAggregatesFilter | Date | string
    personComment?: StringWithAggregatesFilter | string
    doctorComment?: StringWithAggregatesFilter | string
    created?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DoctorWhereInput = {
    AND?: Enumerable<DoctorWhereInput>
    OR?: Enumerable<DoctorWhereInput>
    NOT?: Enumerable<DoctorWhereInput>
    id?: StringFilter | string
    specialization?: StringFilter | string
    actuality?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    description?: StringFilter | string
    link?: StringFilter | string
    profilePicture?: StringFilter | string
    addressId?: StringFilter | string
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    personId?: StringFilter | string
    person?: XOR<PersonRelationFilter, PersonWhereInput>
    reservations?: ReservationListRelationFilter
    references?: ReferenceListRelationFilter
    languages?: DoctorLanguageListRelationFilter
    openingHours?: OpeningHoursListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    specialization?: SortOrder
    actuality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    link?: SortOrder
    profilePicture?: SortOrder
    addressId?: SortOrder
    address?: AddressOrderByWithRelationInput
    personId?: SortOrder
    person?: PersonOrderByWithRelationInput
    reservations?: ReservationOrderByRelationAggregateInput
    references?: ReferenceOrderByRelationAggregateInput
    languages?: DoctorLanguageOrderByRelationAggregateInput
    openingHours?: OpeningHoursOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = {
    id?: string
    addressId?: string
    personId?: string
  }

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    specialization?: SortOrder
    actuality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    link?: SortOrder
    profilePicture?: SortOrder
    addressId?: SortOrder
    personId?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    OR?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    specialization?: StringWithAggregatesFilter | string
    actuality?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
    profilePicture?: StringWithAggregatesFilter | string
    addressId?: StringWithAggregatesFilter | string
    personId?: StringWithAggregatesFilter | string
  }

  export type ReferenceWhereInput = {
    AND?: Enumerable<ReferenceWhereInput>
    OR?: Enumerable<ReferenceWhereInput>
    NOT?: Enumerable<ReferenceWhereInput>
    id?: StringFilter | string
    doctorId?: StringFilter | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    comment?: StringFilter | string
    rate?: IntFilter | number
    author?: StringFilter | string
    doctor_comment?: StringFilter | string
    created?: DateTimeFilter | Date | string
  }

  export type ReferenceOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    comment?: SortOrder
    rate?: SortOrder
    author?: SortOrder
    doctor_comment?: SortOrder
    created?: SortOrder
  }

  export type ReferenceWhereUniqueInput = {
    id?: string
  }

  export type ReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    comment?: SortOrder
    rate?: SortOrder
    author?: SortOrder
    doctor_comment?: SortOrder
    created?: SortOrder
    _count?: ReferenceCountOrderByAggregateInput
    _avg?: ReferenceAvgOrderByAggregateInput
    _max?: ReferenceMaxOrderByAggregateInput
    _min?: ReferenceMinOrderByAggregateInput
    _sum?: ReferenceSumOrderByAggregateInput
  }

  export type ReferenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReferenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReferenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReferenceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    doctorId?: StringWithAggregatesFilter | string
    comment?: StringWithAggregatesFilter | string
    rate?: IntWithAggregatesFilter | number
    author?: StringWithAggregatesFilter | string
    doctor_comment?: StringWithAggregatesFilter | string
    created?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DoctorLanguageWhereInput = {
    AND?: Enumerable<DoctorLanguageWhereInput>
    OR?: Enumerable<DoctorLanguageWhereInput>
    NOT?: Enumerable<DoctorLanguageWhereInput>
    doctorId?: StringFilter | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    language?: StringFilter | string
  }

  export type DoctorLanguageOrderByWithRelationInput = {
    doctorId?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    language?: SortOrder
  }

  export type DoctorLanguageWhereUniqueInput = {
    doctorId_language?: DoctorLanguageDoctorIdLanguageCompoundUniqueInput
  }

  export type DoctorLanguageOrderByWithAggregationInput = {
    doctorId?: SortOrder
    language?: SortOrder
    _count?: DoctorLanguageCountOrderByAggregateInput
    _max?: DoctorLanguageMaxOrderByAggregateInput
    _min?: DoctorLanguageMinOrderByAggregateInput
  }

  export type DoctorLanguageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DoctorLanguageScalarWhereWithAggregatesInput>
    OR?: Enumerable<DoctorLanguageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DoctorLanguageScalarWhereWithAggregatesInput>
    doctorId?: StringWithAggregatesFilter | string
    language?: StringWithAggregatesFilter | string
  }

  export type OpeningHoursWhereInput = {
    AND?: Enumerable<OpeningHoursWhereInput>
    OR?: Enumerable<OpeningHoursWhereInput>
    NOT?: Enumerable<OpeningHoursWhereInput>
    doctorId?: StringFilter | string
    dostor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    day?: StringFilter | string
    fromTime?: DateTimeFilter | Date | string
    toTime?: DateTimeFilter | Date | string
    fromDate?: DateTimeFilter | Date | string
  }

  export type OpeningHoursOrderByWithRelationInput = {
    doctorId?: SortOrder
    dostor?: DoctorOrderByWithRelationInput
    day?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    fromDate?: SortOrder
  }

  export type OpeningHoursWhereUniqueInput = {
    doctorId_day?: OpeningHoursDoctorIdDayCompoundUniqueInput
  }

  export type OpeningHoursOrderByWithAggregationInput = {
    doctorId?: SortOrder
    day?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    fromDate?: SortOrder
    _count?: OpeningHoursCountOrderByAggregateInput
    _max?: OpeningHoursMaxOrderByAggregateInput
    _min?: OpeningHoursMinOrderByAggregateInput
  }

  export type OpeningHoursScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OpeningHoursScalarWhereWithAggregatesInput>
    OR?: Enumerable<OpeningHoursScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OpeningHoursScalarWhereWithAggregatesInput>
    doctorId?: StringWithAggregatesFilter | string
    day?: StringWithAggregatesFilter | string
    fromTime?: DateTimeWithAggregatesFilter | Date | string
    toTime?: DateTimeWithAggregatesFilter | Date | string
    fromDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PersonCreateInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insurance: InsuranceCompanyCreateNestedOneWithoutPersonsInput
    address: AddressCreateNestedOneWithoutPersonInput
    password: string
    reservations?: ReservationCreateNestedManyWithoutPersonInput
    doctor?: DoctorCreateNestedOneWithoutPersonInput
  }

  export type PersonUncheckedCreateInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insuranceId: string
    addressId: string
    password: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutPersonInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutPersonInput
  }

  export type PersonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insurance?: InsuranceCompanyUpdateOneRequiredWithoutPersonsInput
    address?: AddressUpdateOneRequiredWithoutPersonInput
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUpdateManyWithoutPersonInput
    doctor?: DoctorUpdateOneWithoutPersonInput
  }

  export type PersonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutPersonInput
    doctor?: DoctorUncheckedUpdateOneWithoutPersonInput
  }

  export type PersonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type InsuranceCompanyCreateInput = {
    id?: string
    number: number
    name: string
    persons?: PersonCreateNestedManyWithoutInsuranceInput
  }

  export type InsuranceCompanyUncheckedCreateInput = {
    id?: string
    number: number
    name: string
    persons?: PersonUncheckedCreateNestedManyWithoutInsuranceInput
  }

  export type InsuranceCompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    persons?: PersonUpdateManyWithoutInsuranceInput
  }

  export type InsuranceCompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    persons?: PersonUncheckedUpdateManyWithoutInsuranceInput
  }

  export type InsuranceCompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InsuranceCompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AddressCreateInput = {
    id?: string
    country: string
    city: string
    postalCode: number
    street: string
    person?: PersonCreateNestedOneWithoutAddressInput
    doctor?: DoctorCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    country: string
    city: string
    postalCode: number
    street: string
    person?: PersonUncheckedCreateNestedOneWithoutAddressInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutAddressInput
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneWithoutAddressInput
    doctor?: DoctorUpdateOneWithoutAddressInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    person?: PersonUncheckedUpdateOneWithoutAddressInput
    doctor?: DoctorUncheckedUpdateOneWithoutAddressInput
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationCreateInput = {
    id?: string
    person: PersonCreateNestedOneWithoutReservationsInput
    doctor: DoctorCreateNestedOneWithoutReservationsInput
    from: Date | string
    personComment: string
    doctorComment: string
    created?: Date | string
  }

  export type ReservationUncheckedCreateInput = {
    id?: string
    personId: string
    doctorId: string
    from: Date | string
    personComment: string
    doctorComment: string
    created?: Date | string
  }

  export type ReservationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneRequiredWithoutReservationsInput
    doctor?: DoctorUpdateOneRequiredWithoutReservationsInput
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    address: AddressCreateNestedOneWithoutDoctorInput
    person: PersonCreateNestedOneWithoutDoctorInput
    reservations?: ReservationCreateNestedManyWithoutDoctorInput
    references?: ReferenceCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursCreateNestedManyWithoutDostorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    personId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutDoctorInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedCreateNestedManyWithoutDostorInput
  }

  export type DoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutDoctorInput
    person?: PersonUpdateOneRequiredWithoutDoctorInput
    reservations?: ReservationUpdateManyWithoutDoctorInput
    references?: ReferenceUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUpdateManyWithoutDostorInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutDoctorInput
    references?: ReferenceUncheckedUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedUpdateManyWithoutDostorInput
  }

  export type DoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
  }

  export type ReferenceCreateInput = {
    id?: string
    doctor: DoctorCreateNestedOneWithoutReferencesInput
    comment: string
    rate: number
    author: string
    doctor_comment: string
    created?: Date | string
  }

  export type ReferenceUncheckedCreateInput = {
    id?: string
    doctorId: string
    comment: string
    rate: number
    author: string
    doctor_comment: string
    created?: Date | string
  }

  export type ReferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUpdateOneRequiredWithoutReferencesInput
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorLanguageCreateInput = {
    doctor: DoctorCreateNestedOneWithoutLanguagesInput
    language: string
  }

  export type DoctorLanguageUncheckedCreateInput = {
    doctorId: string
    language: string
  }

  export type DoctorLanguageUpdateInput = {
    doctor?: DoctorUpdateOneRequiredWithoutLanguagesInput
    language?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorLanguageUncheckedUpdateInput = {
    doctorId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorLanguageUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorLanguageUncheckedUpdateManyInput = {
    doctorId?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type OpeningHoursCreateInput = {
    dostor: DoctorCreateNestedOneWithoutOpeningHoursInput
    day: string
    fromTime: Date | string
    toTime: Date | string
    fromDate?: Date | string
  }

  export type OpeningHoursUncheckedCreateInput = {
    doctorId: string
    day: string
    fromTime: Date | string
    toTime: Date | string
    fromDate?: Date | string
  }

  export type OpeningHoursUpdateInput = {
    dostor?: DoctorUpdateOneRequiredWithoutOpeningHoursInput
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpeningHoursUncheckedUpdateInput = {
    doctorId?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpeningHoursUpdateManyMutationInput = {
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpeningHoursUncheckedUpdateManyInput = {
    doctorId?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type InsuranceCompanyRelationFilter = {
    is?: InsuranceCompanyWhereInput
    isNot?: InsuranceCompanyWhereInput
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type DoctorRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    surename?: SortOrder
    degree?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    insuraceNumber?: SortOrder
    insuranceId?: SortOrder
    addressId?: SortOrder
    password?: SortOrder
  }

  export type PersonAvgOrderByAggregateInput = {
    phone?: SortOrder
    insuraceNumber?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    surename?: SortOrder
    degree?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    insuraceNumber?: SortOrder
    insuranceId?: SortOrder
    addressId?: SortOrder
    password?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    surename?: SortOrder
    degree?: SortOrder
    birthdate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    insuraceNumber?: SortOrder
    insuranceId?: SortOrder
    addressId?: SortOrder
    password?: SortOrder
  }

  export type PersonSumOrderByAggregateInput = {
    phone?: SortOrder
    insuraceNumber?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type PersonListRelationFilter = {
    every?: PersonWhereInput
    some?: PersonWhereInput
    none?: PersonWhereInput
  }

  export type PersonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsuranceCompanyCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
  }

  export type InsuranceCompanyAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type InsuranceCompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
  }

  export type InsuranceCompanyMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
  }

  export type InsuranceCompanySumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type PersonRelationFilter = {
    is?: PersonWhereInput | null
    isNot?: PersonWhereInput | null
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    street?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    postalCode?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    street?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    street?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    postalCode?: SortOrder
  }

  export type ReservationCountOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    doctorId?: SortOrder
    from?: SortOrder
    personComment?: SortOrder
    doctorComment?: SortOrder
    created?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    doctorId?: SortOrder
    from?: SortOrder
    personComment?: SortOrder
    doctorComment?: SortOrder
    created?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    doctorId?: SortOrder
    from?: SortOrder
    personComment?: SortOrder
    doctorComment?: SortOrder
    created?: SortOrder
  }

  export type ReferenceListRelationFilter = {
    every?: ReferenceWhereInput
    some?: ReferenceWhereInput
    none?: ReferenceWhereInput
  }

  export type DoctorLanguageListRelationFilter = {
    every?: DoctorLanguageWhereInput
    some?: DoctorLanguageWhereInput
    none?: DoctorLanguageWhereInput
  }

  export type OpeningHoursListRelationFilter = {
    every?: OpeningHoursWhereInput
    some?: OpeningHoursWhereInput
    none?: OpeningHoursWhereInput
  }

  export type ReferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorLanguageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OpeningHoursOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    specialization?: SortOrder
    actuality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    link?: SortOrder
    profilePicture?: SortOrder
    addressId?: SortOrder
    personId?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    specialization?: SortOrder
    actuality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    link?: SortOrder
    profilePicture?: SortOrder
    addressId?: SortOrder
    personId?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    specialization?: SortOrder
    actuality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    link?: SortOrder
    profilePicture?: SortOrder
    addressId?: SortOrder
    personId?: SortOrder
  }

  export type ReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    comment?: SortOrder
    rate?: SortOrder
    author?: SortOrder
    doctor_comment?: SortOrder
    created?: SortOrder
  }

  export type ReferenceAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type ReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    comment?: SortOrder
    rate?: SortOrder
    author?: SortOrder
    doctor_comment?: SortOrder
    created?: SortOrder
  }

  export type ReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    comment?: SortOrder
    rate?: SortOrder
    author?: SortOrder
    doctor_comment?: SortOrder
    created?: SortOrder
  }

  export type ReferenceSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type DoctorLanguageDoctorIdLanguageCompoundUniqueInput = {
    doctorId: string
    language: string
  }

  export type DoctorLanguageCountOrderByAggregateInput = {
    doctorId?: SortOrder
    language?: SortOrder
  }

  export type DoctorLanguageMaxOrderByAggregateInput = {
    doctorId?: SortOrder
    language?: SortOrder
  }

  export type DoctorLanguageMinOrderByAggregateInput = {
    doctorId?: SortOrder
    language?: SortOrder
  }

  export type OpeningHoursDoctorIdDayCompoundUniqueInput = {
    doctorId: string
    day: string
  }

  export type OpeningHoursCountOrderByAggregateInput = {
    doctorId?: SortOrder
    day?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    fromDate?: SortOrder
  }

  export type OpeningHoursMaxOrderByAggregateInput = {
    doctorId?: SortOrder
    day?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    fromDate?: SortOrder
  }

  export type OpeningHoursMinOrderByAggregateInput = {
    doctorId?: SortOrder
    day?: SortOrder
    fromTime?: SortOrder
    toTime?: SortOrder
    fromDate?: SortOrder
  }

  export type InsuranceCompanyCreateNestedOneWithoutPersonsInput = {
    create?: XOR<InsuranceCompanyCreateWithoutPersonsInput, InsuranceCompanyUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: InsuranceCompanyCreateOrConnectWithoutPersonsInput
    connect?: InsuranceCompanyWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutPersonInput = {
    create?: XOR<AddressCreateWithoutPersonInput, AddressUncheckedCreateWithoutPersonInput>
    connectOrCreate?: AddressCreateOrConnectWithoutPersonInput
    connect?: AddressWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutPersonInput>, Enumerable<ReservationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutPersonInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
  }

  export type DoctorCreateNestedOneWithoutPersonInput = {
    create?: XOR<DoctorCreateWithoutPersonInput, DoctorUncheckedCreateWithoutPersonInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPersonInput
    connect?: DoctorWhereUniqueInput
  }

  export type ReservationUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutPersonInput>, Enumerable<ReservationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutPersonInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
  }

  export type DoctorUncheckedCreateNestedOneWithoutPersonInput = {
    create?: XOR<DoctorCreateWithoutPersonInput, DoctorUncheckedCreateWithoutPersonInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPersonInput
    connect?: DoctorWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InsuranceCompanyUpdateOneRequiredWithoutPersonsInput = {
    create?: XOR<InsuranceCompanyCreateWithoutPersonsInput, InsuranceCompanyUncheckedCreateWithoutPersonsInput>
    connectOrCreate?: InsuranceCompanyCreateOrConnectWithoutPersonsInput
    upsert?: InsuranceCompanyUpsertWithoutPersonsInput
    connect?: InsuranceCompanyWhereUniqueInput
    update?: XOR<InsuranceCompanyUpdateWithoutPersonsInput, InsuranceCompanyUncheckedUpdateWithoutPersonsInput>
  }

  export type AddressUpdateOneRequiredWithoutPersonInput = {
    create?: XOR<AddressCreateWithoutPersonInput, AddressUncheckedCreateWithoutPersonInput>
    connectOrCreate?: AddressCreateOrConnectWithoutPersonInput
    upsert?: AddressUpsertWithoutPersonInput
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutPersonInput, AddressUncheckedUpdateWithoutPersonInput>
  }

  export type ReservationUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutPersonInput>, Enumerable<ReservationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<ReservationUpsertWithWhereUniqueWithoutPersonInput>
    set?: Enumerable<ReservationWhereUniqueInput>
    disconnect?: Enumerable<ReservationWhereUniqueInput>
    delete?: Enumerable<ReservationWhereUniqueInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
    update?: Enumerable<ReservationUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<ReservationUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<ReservationScalarWhereInput>
  }

  export type DoctorUpdateOneWithoutPersonInput = {
    create?: XOR<DoctorCreateWithoutPersonInput, DoctorUncheckedCreateWithoutPersonInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPersonInput
    upsert?: DoctorUpsertWithoutPersonInput
    disconnect?: boolean
    delete?: boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutPersonInput, DoctorUncheckedUpdateWithoutPersonInput>
  }

  export type ReservationUncheckedUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutPersonInput>, Enumerable<ReservationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<ReservationUpsertWithWhereUniqueWithoutPersonInput>
    set?: Enumerable<ReservationWhereUniqueInput>
    disconnect?: Enumerable<ReservationWhereUniqueInput>
    delete?: Enumerable<ReservationWhereUniqueInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
    update?: Enumerable<ReservationUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<ReservationUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<ReservationScalarWhereInput>
  }

  export type DoctorUncheckedUpdateOneWithoutPersonInput = {
    create?: XOR<DoctorCreateWithoutPersonInput, DoctorUncheckedCreateWithoutPersonInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutPersonInput
    upsert?: DoctorUpsertWithoutPersonInput
    disconnect?: boolean
    delete?: boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutPersonInput, DoctorUncheckedUpdateWithoutPersonInput>
  }

  export type PersonCreateNestedManyWithoutInsuranceInput = {
    create?: XOR<Enumerable<PersonCreateWithoutInsuranceInput>, Enumerable<PersonUncheckedCreateWithoutInsuranceInput>>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutInsuranceInput>
    connect?: Enumerable<PersonWhereUniqueInput>
  }

  export type PersonUncheckedCreateNestedManyWithoutInsuranceInput = {
    create?: XOR<Enumerable<PersonCreateWithoutInsuranceInput>, Enumerable<PersonUncheckedCreateWithoutInsuranceInput>>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutInsuranceInput>
    connect?: Enumerable<PersonWhereUniqueInput>
  }

  export type PersonUpdateManyWithoutInsuranceInput = {
    create?: XOR<Enumerable<PersonCreateWithoutInsuranceInput>, Enumerable<PersonUncheckedCreateWithoutInsuranceInput>>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutInsuranceInput>
    upsert?: Enumerable<PersonUpsertWithWhereUniqueWithoutInsuranceInput>
    set?: Enumerable<PersonWhereUniqueInput>
    disconnect?: Enumerable<PersonWhereUniqueInput>
    delete?: Enumerable<PersonWhereUniqueInput>
    connect?: Enumerable<PersonWhereUniqueInput>
    update?: Enumerable<PersonUpdateWithWhereUniqueWithoutInsuranceInput>
    updateMany?: Enumerable<PersonUpdateManyWithWhereWithoutInsuranceInput>
    deleteMany?: Enumerable<PersonScalarWhereInput>
  }

  export type PersonUncheckedUpdateManyWithoutInsuranceInput = {
    create?: XOR<Enumerable<PersonCreateWithoutInsuranceInput>, Enumerable<PersonUncheckedCreateWithoutInsuranceInput>>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutInsuranceInput>
    upsert?: Enumerable<PersonUpsertWithWhereUniqueWithoutInsuranceInput>
    set?: Enumerable<PersonWhereUniqueInput>
    disconnect?: Enumerable<PersonWhereUniqueInput>
    delete?: Enumerable<PersonWhereUniqueInput>
    connect?: Enumerable<PersonWhereUniqueInput>
    update?: Enumerable<PersonUpdateWithWhereUniqueWithoutInsuranceInput>
    updateMany?: Enumerable<PersonUpdateManyWithWhereWithoutInsuranceInput>
    deleteMany?: Enumerable<PersonScalarWhereInput>
  }

  export type PersonCreateNestedOneWithoutAddressInput = {
    create?: XOR<PersonCreateWithoutAddressInput, PersonUncheckedCreateWithoutAddressInput>
    connectOrCreate?: PersonCreateOrConnectWithoutAddressInput
    connect?: PersonWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutAddressInput = {
    create?: XOR<DoctorCreateWithoutAddressInput, DoctorUncheckedCreateWithoutAddressInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAddressInput
    connect?: DoctorWhereUniqueInput
  }

  export type PersonUncheckedCreateNestedOneWithoutAddressInput = {
    create?: XOR<PersonCreateWithoutAddressInput, PersonUncheckedCreateWithoutAddressInput>
    connectOrCreate?: PersonCreateOrConnectWithoutAddressInput
    connect?: PersonWhereUniqueInput
  }

  export type DoctorUncheckedCreateNestedOneWithoutAddressInput = {
    create?: XOR<DoctorCreateWithoutAddressInput, DoctorUncheckedCreateWithoutAddressInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAddressInput
    connect?: DoctorWhereUniqueInput
  }

  export type PersonUpdateOneWithoutAddressInput = {
    create?: XOR<PersonCreateWithoutAddressInput, PersonUncheckedCreateWithoutAddressInput>
    connectOrCreate?: PersonCreateOrConnectWithoutAddressInput
    upsert?: PersonUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: PersonWhereUniqueInput
    update?: XOR<PersonUpdateWithoutAddressInput, PersonUncheckedUpdateWithoutAddressInput>
  }

  export type DoctorUpdateOneWithoutAddressInput = {
    create?: XOR<DoctorCreateWithoutAddressInput, DoctorUncheckedCreateWithoutAddressInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAddressInput
    upsert?: DoctorUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutAddressInput, DoctorUncheckedUpdateWithoutAddressInput>
  }

  export type PersonUncheckedUpdateOneWithoutAddressInput = {
    create?: XOR<PersonCreateWithoutAddressInput, PersonUncheckedCreateWithoutAddressInput>
    connectOrCreate?: PersonCreateOrConnectWithoutAddressInput
    upsert?: PersonUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: PersonWhereUniqueInput
    update?: XOR<PersonUpdateWithoutAddressInput, PersonUncheckedUpdateWithoutAddressInput>
  }

  export type DoctorUncheckedUpdateOneWithoutAddressInput = {
    create?: XOR<DoctorCreateWithoutAddressInput, DoctorUncheckedCreateWithoutAddressInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAddressInput
    upsert?: DoctorUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutAddressInput, DoctorUncheckedUpdateWithoutAddressInput>
  }

  export type PersonCreateNestedOneWithoutReservationsInput = {
    create?: XOR<PersonCreateWithoutReservationsInput, PersonUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutReservationsInput
    connect?: PersonWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutReservationsInput = {
    create?: XOR<DoctorCreateWithoutReservationsInput, DoctorUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutReservationsInput
    connect?: DoctorWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutReservationsInput = {
    create?: XOR<PersonCreateWithoutReservationsInput, PersonUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutReservationsInput
    upsert?: PersonUpsertWithoutReservationsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<PersonUpdateWithoutReservationsInput, PersonUncheckedUpdateWithoutReservationsInput>
  }

  export type DoctorUpdateOneRequiredWithoutReservationsInput = {
    create?: XOR<DoctorCreateWithoutReservationsInput, DoctorUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutReservationsInput
    upsert?: DoctorUpsertWithoutReservationsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutReservationsInput, DoctorUncheckedUpdateWithoutReservationsInput>
  }

  export type AddressCreateNestedOneWithoutDoctorInput = {
    create?: XOR<AddressCreateWithoutDoctorInput, AddressUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: AddressCreateOrConnectWithoutDoctorInput
    connect?: AddressWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutDoctorInput = {
    create?: XOR<PersonCreateWithoutDoctorInput, PersonUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: PersonCreateOrConnectWithoutDoctorInput
    connect?: PersonWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutDoctorInput>, Enumerable<ReservationUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutDoctorInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
  }

  export type ReferenceCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReferenceCreateWithoutDoctorInput>, Enumerable<ReferenceUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReferenceCreateOrConnectWithoutDoctorInput>
    connect?: Enumerable<ReferenceWhereUniqueInput>
  }

  export type DoctorLanguageCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<DoctorLanguageCreateWithoutDoctorInput>, Enumerable<DoctorLanguageUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<DoctorLanguageCreateOrConnectWithoutDoctorInput>
    connect?: Enumerable<DoctorLanguageWhereUniqueInput>
  }

  export type OpeningHoursCreateNestedManyWithoutDostorInput = {
    create?: XOR<Enumerable<OpeningHoursCreateWithoutDostorInput>, Enumerable<OpeningHoursUncheckedCreateWithoutDostorInput>>
    connectOrCreate?: Enumerable<OpeningHoursCreateOrConnectWithoutDostorInput>
    connect?: Enumerable<OpeningHoursWhereUniqueInput>
  }

  export type ReservationUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutDoctorInput>, Enumerable<ReservationUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutDoctorInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
  }

  export type ReferenceUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReferenceCreateWithoutDoctorInput>, Enumerable<ReferenceUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReferenceCreateOrConnectWithoutDoctorInput>
    connect?: Enumerable<ReferenceWhereUniqueInput>
  }

  export type DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<DoctorLanguageCreateWithoutDoctorInput>, Enumerable<DoctorLanguageUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<DoctorLanguageCreateOrConnectWithoutDoctorInput>
    connect?: Enumerable<DoctorLanguageWhereUniqueInput>
  }

  export type OpeningHoursUncheckedCreateNestedManyWithoutDostorInput = {
    create?: XOR<Enumerable<OpeningHoursCreateWithoutDostorInput>, Enumerable<OpeningHoursUncheckedCreateWithoutDostorInput>>
    connectOrCreate?: Enumerable<OpeningHoursCreateOrConnectWithoutDostorInput>
    connect?: Enumerable<OpeningHoursWhereUniqueInput>
  }

  export type AddressUpdateOneRequiredWithoutDoctorInput = {
    create?: XOR<AddressCreateWithoutDoctorInput, AddressUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: AddressCreateOrConnectWithoutDoctorInput
    upsert?: AddressUpsertWithoutDoctorInput
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutDoctorInput, AddressUncheckedUpdateWithoutDoctorInput>
  }

  export type PersonUpdateOneRequiredWithoutDoctorInput = {
    create?: XOR<PersonCreateWithoutDoctorInput, PersonUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: PersonCreateOrConnectWithoutDoctorInput
    upsert?: PersonUpsertWithoutDoctorInput
    connect?: PersonWhereUniqueInput
    update?: XOR<PersonUpdateWithoutDoctorInput, PersonUncheckedUpdateWithoutDoctorInput>
  }

  export type ReservationUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutDoctorInput>, Enumerable<ReservationUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<ReservationUpsertWithWhereUniqueWithoutDoctorInput>
    set?: Enumerable<ReservationWhereUniqueInput>
    disconnect?: Enumerable<ReservationWhereUniqueInput>
    delete?: Enumerable<ReservationWhereUniqueInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
    update?: Enumerable<ReservationUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<ReservationUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<ReservationScalarWhereInput>
  }

  export type ReferenceUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReferenceCreateWithoutDoctorInput>, Enumerable<ReferenceUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReferenceCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<ReferenceUpsertWithWhereUniqueWithoutDoctorInput>
    set?: Enumerable<ReferenceWhereUniqueInput>
    disconnect?: Enumerable<ReferenceWhereUniqueInput>
    delete?: Enumerable<ReferenceWhereUniqueInput>
    connect?: Enumerable<ReferenceWhereUniqueInput>
    update?: Enumerable<ReferenceUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<ReferenceUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<ReferenceScalarWhereInput>
  }

  export type DoctorLanguageUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<DoctorLanguageCreateWithoutDoctorInput>, Enumerable<DoctorLanguageUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<DoctorLanguageCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<DoctorLanguageUpsertWithWhereUniqueWithoutDoctorInput>
    set?: Enumerable<DoctorLanguageWhereUniqueInput>
    disconnect?: Enumerable<DoctorLanguageWhereUniqueInput>
    delete?: Enumerable<DoctorLanguageWhereUniqueInput>
    connect?: Enumerable<DoctorLanguageWhereUniqueInput>
    update?: Enumerable<DoctorLanguageUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<DoctorLanguageUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<DoctorLanguageScalarWhereInput>
  }

  export type OpeningHoursUpdateManyWithoutDostorInput = {
    create?: XOR<Enumerable<OpeningHoursCreateWithoutDostorInput>, Enumerable<OpeningHoursUncheckedCreateWithoutDostorInput>>
    connectOrCreate?: Enumerable<OpeningHoursCreateOrConnectWithoutDostorInput>
    upsert?: Enumerable<OpeningHoursUpsertWithWhereUniqueWithoutDostorInput>
    set?: Enumerable<OpeningHoursWhereUniqueInput>
    disconnect?: Enumerable<OpeningHoursWhereUniqueInput>
    delete?: Enumerable<OpeningHoursWhereUniqueInput>
    connect?: Enumerable<OpeningHoursWhereUniqueInput>
    update?: Enumerable<OpeningHoursUpdateWithWhereUniqueWithoutDostorInput>
    updateMany?: Enumerable<OpeningHoursUpdateManyWithWhereWithoutDostorInput>
    deleteMany?: Enumerable<OpeningHoursScalarWhereInput>
  }

  export type ReservationUncheckedUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReservationCreateWithoutDoctorInput>, Enumerable<ReservationUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReservationCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<ReservationUpsertWithWhereUniqueWithoutDoctorInput>
    set?: Enumerable<ReservationWhereUniqueInput>
    disconnect?: Enumerable<ReservationWhereUniqueInput>
    delete?: Enumerable<ReservationWhereUniqueInput>
    connect?: Enumerable<ReservationWhereUniqueInput>
    update?: Enumerable<ReservationUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<ReservationUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<ReservationScalarWhereInput>
  }

  export type ReferenceUncheckedUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<ReferenceCreateWithoutDoctorInput>, Enumerable<ReferenceUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<ReferenceCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<ReferenceUpsertWithWhereUniqueWithoutDoctorInput>
    set?: Enumerable<ReferenceWhereUniqueInput>
    disconnect?: Enumerable<ReferenceWhereUniqueInput>
    delete?: Enumerable<ReferenceWhereUniqueInput>
    connect?: Enumerable<ReferenceWhereUniqueInput>
    update?: Enumerable<ReferenceUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<ReferenceUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<ReferenceScalarWhereInput>
  }

  export type DoctorLanguageUncheckedUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<DoctorLanguageCreateWithoutDoctorInput>, Enumerable<DoctorLanguageUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<DoctorLanguageCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<DoctorLanguageUpsertWithWhereUniqueWithoutDoctorInput>
    set?: Enumerable<DoctorLanguageWhereUniqueInput>
    disconnect?: Enumerable<DoctorLanguageWhereUniqueInput>
    delete?: Enumerable<DoctorLanguageWhereUniqueInput>
    connect?: Enumerable<DoctorLanguageWhereUniqueInput>
    update?: Enumerable<DoctorLanguageUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<DoctorLanguageUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<DoctorLanguageScalarWhereInput>
  }

  export type OpeningHoursUncheckedUpdateManyWithoutDostorInput = {
    create?: XOR<Enumerable<OpeningHoursCreateWithoutDostorInput>, Enumerable<OpeningHoursUncheckedCreateWithoutDostorInput>>
    connectOrCreate?: Enumerable<OpeningHoursCreateOrConnectWithoutDostorInput>
    upsert?: Enumerable<OpeningHoursUpsertWithWhereUniqueWithoutDostorInput>
    set?: Enumerable<OpeningHoursWhereUniqueInput>
    disconnect?: Enumerable<OpeningHoursWhereUniqueInput>
    delete?: Enumerable<OpeningHoursWhereUniqueInput>
    connect?: Enumerable<OpeningHoursWhereUniqueInput>
    update?: Enumerable<OpeningHoursUpdateWithWhereUniqueWithoutDostorInput>
    updateMany?: Enumerable<OpeningHoursUpdateManyWithWhereWithoutDostorInput>
    deleteMany?: Enumerable<OpeningHoursScalarWhereInput>
  }

  export type DoctorCreateNestedOneWithoutReferencesInput = {
    create?: XOR<DoctorCreateWithoutReferencesInput, DoctorUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutReferencesInput
    connect?: DoctorWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutReferencesInput = {
    create?: XOR<DoctorCreateWithoutReferencesInput, DoctorUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutReferencesInput
    upsert?: DoctorUpsertWithoutReferencesInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutReferencesInput, DoctorUncheckedUpdateWithoutReferencesInput>
  }

  export type DoctorCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<DoctorCreateWithoutLanguagesInput, DoctorUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutLanguagesInput
    connect?: DoctorWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutLanguagesInput = {
    create?: XOR<DoctorCreateWithoutLanguagesInput, DoctorUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutLanguagesInput
    upsert?: DoctorUpsertWithoutLanguagesInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutLanguagesInput, DoctorUncheckedUpdateWithoutLanguagesInput>
  }

  export type DoctorCreateNestedOneWithoutOpeningHoursInput = {
    create?: XOR<DoctorCreateWithoutOpeningHoursInput, DoctorUncheckedCreateWithoutOpeningHoursInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutOpeningHoursInput
    connect?: DoctorWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutOpeningHoursInput = {
    create?: XOR<DoctorCreateWithoutOpeningHoursInput, DoctorUncheckedCreateWithoutOpeningHoursInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutOpeningHoursInput
    upsert?: DoctorUpsertWithoutOpeningHoursInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutOpeningHoursInput, DoctorUncheckedUpdateWithoutOpeningHoursInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type InsuranceCompanyCreateWithoutPersonsInput = {
    id?: string
    number: number
    name: string
  }

  export type InsuranceCompanyUncheckedCreateWithoutPersonsInput = {
    id?: string
    number: number
    name: string
  }

  export type InsuranceCompanyCreateOrConnectWithoutPersonsInput = {
    where: InsuranceCompanyWhereUniqueInput
    create: XOR<InsuranceCompanyCreateWithoutPersonsInput, InsuranceCompanyUncheckedCreateWithoutPersonsInput>
  }

  export type AddressCreateWithoutPersonInput = {
    id?: string
    country: string
    city: string
    postalCode: number
    street: string
    doctor?: DoctorCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutPersonInput = {
    id?: string
    country: string
    city: string
    postalCode: number
    street: string
    doctor?: DoctorUncheckedCreateNestedOneWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutPersonInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutPersonInput, AddressUncheckedCreateWithoutPersonInput>
  }

  export type ReservationCreateWithoutPersonInput = {
    id?: string
    doctor: DoctorCreateNestedOneWithoutReservationsInput
    from: Date | string
    personComment: string
    doctorComment: string
    created?: Date | string
  }

  export type ReservationUncheckedCreateWithoutPersonInput = {
    id?: string
    doctorId: string
    from: Date | string
    personComment: string
    doctorComment: string
    created?: Date | string
  }

  export type ReservationCreateOrConnectWithoutPersonInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutPersonInput, ReservationUncheckedCreateWithoutPersonInput>
  }

  export type DoctorCreateWithoutPersonInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    address: AddressCreateNestedOneWithoutDoctorInput
    reservations?: ReservationCreateNestedManyWithoutDoctorInput
    references?: ReferenceCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursCreateNestedManyWithoutDostorInput
  }

  export type DoctorUncheckedCreateWithoutPersonInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutDoctorInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedCreateNestedManyWithoutDostorInput
  }

  export type DoctorCreateOrConnectWithoutPersonInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutPersonInput, DoctorUncheckedCreateWithoutPersonInput>
  }

  export type InsuranceCompanyUpsertWithoutPersonsInput = {
    update: XOR<InsuranceCompanyUpdateWithoutPersonsInput, InsuranceCompanyUncheckedUpdateWithoutPersonsInput>
    create: XOR<InsuranceCompanyCreateWithoutPersonsInput, InsuranceCompanyUncheckedCreateWithoutPersonsInput>
  }

  export type InsuranceCompanyUpdateWithoutPersonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InsuranceCompanyUncheckedUpdateWithoutPersonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUpsertWithoutPersonInput = {
    update: XOR<AddressUpdateWithoutPersonInput, AddressUncheckedUpdateWithoutPersonInput>
    create: XOR<AddressCreateWithoutPersonInput, AddressUncheckedCreateWithoutPersonInput>
  }

  export type AddressUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUpdateOneWithoutAddressInput
  }

  export type AddressUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUncheckedUpdateOneWithoutAddressInput
  }

  export type ReservationUpsertWithWhereUniqueWithoutPersonInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutPersonInput, ReservationUncheckedUpdateWithoutPersonInput>
    create: XOR<ReservationCreateWithoutPersonInput, ReservationUncheckedCreateWithoutPersonInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutPersonInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutPersonInput, ReservationUncheckedUpdateWithoutPersonInput>
  }

  export type ReservationUpdateManyWithWhereWithoutPersonInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutReservationsInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: Enumerable<ReservationScalarWhereInput>
    OR?: Enumerable<ReservationScalarWhereInput>
    NOT?: Enumerable<ReservationScalarWhereInput>
    id?: StringFilter | string
    personId?: StringFilter | string
    doctorId?: StringFilter | string
    from?: DateTimeFilter | Date | string
    personComment?: StringFilter | string
    doctorComment?: StringFilter | string
    created?: DateTimeFilter | Date | string
  }

  export type DoctorUpsertWithoutPersonInput = {
    update: XOR<DoctorUpdateWithoutPersonInput, DoctorUncheckedUpdateWithoutPersonInput>
    create: XOR<DoctorCreateWithoutPersonInput, DoctorUncheckedCreateWithoutPersonInput>
  }

  export type DoctorUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutDoctorInput
    reservations?: ReservationUpdateManyWithoutDoctorInput
    references?: ReferenceUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUpdateManyWithoutDostorInput
  }

  export type DoctorUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutDoctorInput
    references?: ReferenceUncheckedUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedUpdateManyWithoutDostorInput
  }

  export type PersonCreateWithoutInsuranceInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    address: AddressCreateNestedOneWithoutPersonInput
    password: string
    reservations?: ReservationCreateNestedManyWithoutPersonInput
    doctor?: DoctorCreateNestedOneWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutInsuranceInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    addressId: string
    password: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutPersonInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutInsuranceInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutInsuranceInput, PersonUncheckedCreateWithoutInsuranceInput>
  }

  export type PersonUpsertWithWhereUniqueWithoutInsuranceInput = {
    where: PersonWhereUniqueInput
    update: XOR<PersonUpdateWithoutInsuranceInput, PersonUncheckedUpdateWithoutInsuranceInput>
    create: XOR<PersonCreateWithoutInsuranceInput, PersonUncheckedCreateWithoutInsuranceInput>
  }

  export type PersonUpdateWithWhereUniqueWithoutInsuranceInput = {
    where: PersonWhereUniqueInput
    data: XOR<PersonUpdateWithoutInsuranceInput, PersonUncheckedUpdateWithoutInsuranceInput>
  }

  export type PersonUpdateManyWithWhereWithoutInsuranceInput = {
    where: PersonScalarWhereInput
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyWithoutPersonsInput>
  }

  export type PersonScalarWhereInput = {
    AND?: Enumerable<PersonScalarWhereInput>
    OR?: Enumerable<PersonScalarWhereInput>
    NOT?: Enumerable<PersonScalarWhereInput>
    id?: StringFilter | string
    firstname?: StringFilter | string
    surename?: StringFilter | string
    degree?: StringFilter | string
    birthdate?: DateTimeFilter | Date | string
    email?: StringFilter | string
    phone?: IntFilter | number
    insuraceNumber?: IntFilter | number
    insuranceId?: StringFilter | string
    addressId?: StringFilter | string
    password?: StringFilter | string
  }

  export type PersonCreateWithoutAddressInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insurance: InsuranceCompanyCreateNestedOneWithoutPersonsInput
    password: string
    reservations?: ReservationCreateNestedManyWithoutPersonInput
    doctor?: DoctorCreateNestedOneWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutAddressInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insuranceId: string
    password: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutPersonInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutAddressInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutAddressInput, PersonUncheckedCreateWithoutAddressInput>
  }

  export type DoctorCreateWithoutAddressInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    person: PersonCreateNestedOneWithoutDoctorInput
    reservations?: ReservationCreateNestedManyWithoutDoctorInput
    references?: ReferenceCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursCreateNestedManyWithoutDostorInput
  }

  export type DoctorUncheckedCreateWithoutAddressInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    personId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutDoctorInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedCreateNestedManyWithoutDostorInput
  }

  export type DoctorCreateOrConnectWithoutAddressInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutAddressInput, DoctorUncheckedCreateWithoutAddressInput>
  }

  export type PersonUpsertWithoutAddressInput = {
    update: XOR<PersonUpdateWithoutAddressInput, PersonUncheckedUpdateWithoutAddressInput>
    create: XOR<PersonCreateWithoutAddressInput, PersonUncheckedCreateWithoutAddressInput>
  }

  export type PersonUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insurance?: InsuranceCompanyUpdateOneRequiredWithoutPersonsInput
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUpdateManyWithoutPersonInput
    doctor?: DoctorUpdateOneWithoutPersonInput
  }

  export type PersonUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutPersonInput
    doctor?: DoctorUncheckedUpdateOneWithoutPersonInput
  }

  export type DoctorUpsertWithoutAddressInput = {
    update: XOR<DoctorUpdateWithoutAddressInput, DoctorUncheckedUpdateWithoutAddressInput>
    create: XOR<DoctorCreateWithoutAddressInput, DoctorUncheckedCreateWithoutAddressInput>
  }

  export type DoctorUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneRequiredWithoutDoctorInput
    reservations?: ReservationUpdateManyWithoutDoctorInput
    references?: ReferenceUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUpdateManyWithoutDostorInput
  }

  export type DoctorUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutDoctorInput
    references?: ReferenceUncheckedUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedUpdateManyWithoutDostorInput
  }

  export type PersonCreateWithoutReservationsInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insurance: InsuranceCompanyCreateNestedOneWithoutPersonsInput
    address: AddressCreateNestedOneWithoutPersonInput
    password: string
    doctor?: DoctorCreateNestedOneWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutReservationsInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insuranceId: string
    addressId: string
    password: string
    doctor?: DoctorUncheckedCreateNestedOneWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutReservationsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutReservationsInput, PersonUncheckedCreateWithoutReservationsInput>
  }

  export type DoctorCreateWithoutReservationsInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    address: AddressCreateNestedOneWithoutDoctorInput
    person: PersonCreateNestedOneWithoutDoctorInput
    references?: ReferenceCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursCreateNestedManyWithoutDostorInput
  }

  export type DoctorUncheckedCreateWithoutReservationsInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    personId: string
    references?: ReferenceUncheckedCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedCreateNestedManyWithoutDostorInput
  }

  export type DoctorCreateOrConnectWithoutReservationsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutReservationsInput, DoctorUncheckedCreateWithoutReservationsInput>
  }

  export type PersonUpsertWithoutReservationsInput = {
    update: XOR<PersonUpdateWithoutReservationsInput, PersonUncheckedUpdateWithoutReservationsInput>
    create: XOR<PersonCreateWithoutReservationsInput, PersonUncheckedCreateWithoutReservationsInput>
  }

  export type PersonUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insurance?: InsuranceCompanyUpdateOneRequiredWithoutPersonsInput
    address?: AddressUpdateOneRequiredWithoutPersonInput
    password?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUpdateOneWithoutPersonInput
  }

  export type PersonUncheckedUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUncheckedUpdateOneWithoutPersonInput
  }

  export type DoctorUpsertWithoutReservationsInput = {
    update: XOR<DoctorUpdateWithoutReservationsInput, DoctorUncheckedUpdateWithoutReservationsInput>
    create: XOR<DoctorCreateWithoutReservationsInput, DoctorUncheckedCreateWithoutReservationsInput>
  }

  export type DoctorUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutDoctorInput
    person?: PersonUpdateOneRequiredWithoutDoctorInput
    references?: ReferenceUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUpdateManyWithoutDostorInput
  }

  export type DoctorUncheckedUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    references?: ReferenceUncheckedUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedUpdateManyWithoutDostorInput
  }

  export type AddressCreateWithoutDoctorInput = {
    id?: string
    country: string
    city: string
    postalCode: number
    street: string
    person?: PersonCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutDoctorInput = {
    id?: string
    country: string
    city: string
    postalCode: number
    street: string
    person?: PersonUncheckedCreateNestedOneWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutDoctorInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutDoctorInput, AddressUncheckedCreateWithoutDoctorInput>
  }

  export type PersonCreateWithoutDoctorInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insurance: InsuranceCompanyCreateNestedOneWithoutPersonsInput
    address: AddressCreateNestedOneWithoutPersonInput
    password: string
    reservations?: ReservationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutDoctorInput = {
    id?: string
    firstname: string
    surename: string
    degree: string
    birthdate: Date | string
    email: string
    phone: number
    insuraceNumber: number
    insuranceId: string
    addressId: string
    password: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutDoctorInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutDoctorInput, PersonUncheckedCreateWithoutDoctorInput>
  }

  export type ReservationCreateWithoutDoctorInput = {
    id?: string
    person: PersonCreateNestedOneWithoutReservationsInput
    from: Date | string
    personComment: string
    doctorComment: string
    created?: Date | string
  }

  export type ReservationUncheckedCreateWithoutDoctorInput = {
    id?: string
    personId: string
    from: Date | string
    personComment: string
    doctorComment: string
    created?: Date | string
  }

  export type ReservationCreateOrConnectWithoutDoctorInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutDoctorInput, ReservationUncheckedCreateWithoutDoctorInput>
  }

  export type ReferenceCreateWithoutDoctorInput = {
    id?: string
    comment: string
    rate: number
    author: string
    doctor_comment: string
    created?: Date | string
  }

  export type ReferenceUncheckedCreateWithoutDoctorInput = {
    id?: string
    comment: string
    rate: number
    author: string
    doctor_comment: string
    created?: Date | string
  }

  export type ReferenceCreateOrConnectWithoutDoctorInput = {
    where: ReferenceWhereUniqueInput
    create: XOR<ReferenceCreateWithoutDoctorInput, ReferenceUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorLanguageCreateWithoutDoctorInput = {
    language: string
  }

  export type DoctorLanguageUncheckedCreateWithoutDoctorInput = {
    language: string
  }

  export type DoctorLanguageCreateOrConnectWithoutDoctorInput = {
    where: DoctorLanguageWhereUniqueInput
    create: XOR<DoctorLanguageCreateWithoutDoctorInput, DoctorLanguageUncheckedCreateWithoutDoctorInput>
  }

  export type OpeningHoursCreateWithoutDostorInput = {
    day: string
    fromTime: Date | string
    toTime: Date | string
    fromDate?: Date | string
  }

  export type OpeningHoursUncheckedCreateWithoutDostorInput = {
    day: string
    fromTime: Date | string
    toTime: Date | string
    fromDate?: Date | string
  }

  export type OpeningHoursCreateOrConnectWithoutDostorInput = {
    where: OpeningHoursWhereUniqueInput
    create: XOR<OpeningHoursCreateWithoutDostorInput, OpeningHoursUncheckedCreateWithoutDostorInput>
  }

  export type AddressUpsertWithoutDoctorInput = {
    update: XOR<AddressUpdateWithoutDoctorInput, AddressUncheckedUpdateWithoutDoctorInput>
    create: XOR<AddressCreateWithoutDoctorInput, AddressUncheckedCreateWithoutDoctorInput>
  }

  export type AddressUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneWithoutAddressInput
  }

  export type AddressUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    person?: PersonUncheckedUpdateOneWithoutAddressInput
  }

  export type PersonUpsertWithoutDoctorInput = {
    update: XOR<PersonUpdateWithoutDoctorInput, PersonUncheckedUpdateWithoutDoctorInput>
    create: XOR<PersonCreateWithoutDoctorInput, PersonUncheckedCreateWithoutDoctorInput>
  }

  export type PersonUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insurance?: InsuranceCompanyUpdateOneRequiredWithoutPersonsInput
    address?: AddressUpdateOneRequiredWithoutPersonInput
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUpdateManyWithoutPersonInput
  }

  export type PersonUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutPersonInput
  }

  export type ReservationUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutDoctorInput, ReservationUncheckedUpdateWithoutDoctorInput>
    create: XOR<ReservationCreateWithoutDoctorInput, ReservationUncheckedCreateWithoutDoctorInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutDoctorInput, ReservationUncheckedUpdateWithoutDoctorInput>
  }

  export type ReservationUpdateManyWithWhereWithoutDoctorInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutReservationsInput>
  }

  export type ReferenceUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ReferenceWhereUniqueInput
    update: XOR<ReferenceUpdateWithoutDoctorInput, ReferenceUncheckedUpdateWithoutDoctorInput>
    create: XOR<ReferenceCreateWithoutDoctorInput, ReferenceUncheckedCreateWithoutDoctorInput>
  }

  export type ReferenceUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ReferenceWhereUniqueInput
    data: XOR<ReferenceUpdateWithoutDoctorInput, ReferenceUncheckedUpdateWithoutDoctorInput>
  }

  export type ReferenceUpdateManyWithWhereWithoutDoctorInput = {
    where: ReferenceScalarWhereInput
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyWithoutReferencesInput>
  }

  export type ReferenceScalarWhereInput = {
    AND?: Enumerable<ReferenceScalarWhereInput>
    OR?: Enumerable<ReferenceScalarWhereInput>
    NOT?: Enumerable<ReferenceScalarWhereInput>
    id?: StringFilter | string
    doctorId?: StringFilter | string
    comment?: StringFilter | string
    rate?: IntFilter | number
    author?: StringFilter | string
    doctor_comment?: StringFilter | string
    created?: DateTimeFilter | Date | string
  }

  export type DoctorLanguageUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorLanguageWhereUniqueInput
    update: XOR<DoctorLanguageUpdateWithoutDoctorInput, DoctorLanguageUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorLanguageCreateWithoutDoctorInput, DoctorLanguageUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorLanguageUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorLanguageWhereUniqueInput
    data: XOR<DoctorLanguageUpdateWithoutDoctorInput, DoctorLanguageUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorLanguageUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorLanguageScalarWhereInput
    data: XOR<DoctorLanguageUpdateManyMutationInput, DoctorLanguageUncheckedUpdateManyWithoutLanguagesInput>
  }

  export type DoctorLanguageScalarWhereInput = {
    AND?: Enumerable<DoctorLanguageScalarWhereInput>
    OR?: Enumerable<DoctorLanguageScalarWhereInput>
    NOT?: Enumerable<DoctorLanguageScalarWhereInput>
    doctorId?: StringFilter | string
    language?: StringFilter | string
  }

  export type OpeningHoursUpsertWithWhereUniqueWithoutDostorInput = {
    where: OpeningHoursWhereUniqueInput
    update: XOR<OpeningHoursUpdateWithoutDostorInput, OpeningHoursUncheckedUpdateWithoutDostorInput>
    create: XOR<OpeningHoursCreateWithoutDostorInput, OpeningHoursUncheckedCreateWithoutDostorInput>
  }

  export type OpeningHoursUpdateWithWhereUniqueWithoutDostorInput = {
    where: OpeningHoursWhereUniqueInput
    data: XOR<OpeningHoursUpdateWithoutDostorInput, OpeningHoursUncheckedUpdateWithoutDostorInput>
  }

  export type OpeningHoursUpdateManyWithWhereWithoutDostorInput = {
    where: OpeningHoursScalarWhereInput
    data: XOR<OpeningHoursUpdateManyMutationInput, OpeningHoursUncheckedUpdateManyWithoutOpeningHoursInput>
  }

  export type OpeningHoursScalarWhereInput = {
    AND?: Enumerable<OpeningHoursScalarWhereInput>
    OR?: Enumerable<OpeningHoursScalarWhereInput>
    NOT?: Enumerable<OpeningHoursScalarWhereInput>
    doctorId?: StringFilter | string
    day?: StringFilter | string
    fromTime?: DateTimeFilter | Date | string
    toTime?: DateTimeFilter | Date | string
    fromDate?: DateTimeFilter | Date | string
  }

  export type DoctorCreateWithoutReferencesInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    address: AddressCreateNestedOneWithoutDoctorInput
    person: PersonCreateNestedOneWithoutDoctorInput
    reservations?: ReservationCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursCreateNestedManyWithoutDostorInput
  }

  export type DoctorUncheckedCreateWithoutReferencesInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    personId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedCreateNestedManyWithoutDostorInput
  }

  export type DoctorCreateOrConnectWithoutReferencesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutReferencesInput, DoctorUncheckedCreateWithoutReferencesInput>
  }

  export type DoctorUpsertWithoutReferencesInput = {
    update: XOR<DoctorUpdateWithoutReferencesInput, DoctorUncheckedUpdateWithoutReferencesInput>
    create: XOR<DoctorCreateWithoutReferencesInput, DoctorUncheckedCreateWithoutReferencesInput>
  }

  export type DoctorUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutDoctorInput
    person?: PersonUpdateOneRequiredWithoutDoctorInput
    reservations?: ReservationUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUpdateManyWithoutDostorInput
  }

  export type DoctorUncheckedUpdateWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedUpdateManyWithoutDostorInput
  }

  export type DoctorCreateWithoutLanguagesInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    address: AddressCreateNestedOneWithoutDoctorInput
    person: PersonCreateNestedOneWithoutDoctorInput
    reservations?: ReservationCreateNestedManyWithoutDoctorInput
    references?: ReferenceCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursCreateNestedManyWithoutDostorInput
  }

  export type DoctorUncheckedCreateWithoutLanguagesInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    personId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutDoctorInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedCreateNestedManyWithoutDostorInput
  }

  export type DoctorCreateOrConnectWithoutLanguagesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutLanguagesInput, DoctorUncheckedCreateWithoutLanguagesInput>
  }

  export type DoctorUpsertWithoutLanguagesInput = {
    update: XOR<DoctorUpdateWithoutLanguagesInput, DoctorUncheckedUpdateWithoutLanguagesInput>
    create: XOR<DoctorCreateWithoutLanguagesInput, DoctorUncheckedCreateWithoutLanguagesInput>
  }

  export type DoctorUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutDoctorInput
    person?: PersonUpdateOneRequiredWithoutDoctorInput
    reservations?: ReservationUpdateManyWithoutDoctorInput
    references?: ReferenceUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUpdateManyWithoutDostorInput
  }

  export type DoctorUncheckedUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutDoctorInput
    references?: ReferenceUncheckedUpdateManyWithoutDoctorInput
    openingHours?: OpeningHoursUncheckedUpdateManyWithoutDostorInput
  }

  export type DoctorCreateWithoutOpeningHoursInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    address: AddressCreateNestedOneWithoutDoctorInput
    person: PersonCreateNestedOneWithoutDoctorInput
    reservations?: ReservationCreateNestedManyWithoutDoctorInput
    references?: ReferenceCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutOpeningHoursInput = {
    id?: string
    specialization: string
    actuality: string
    email: string
    phone: string
    description: string
    link: string
    profilePicture: string
    addressId: string
    personId: string
    reservations?: ReservationUncheckedCreateNestedManyWithoutDoctorInput
    references?: ReferenceUncheckedCreateNestedManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutOpeningHoursInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutOpeningHoursInput, DoctorUncheckedCreateWithoutOpeningHoursInput>
  }

  export type DoctorUpsertWithoutOpeningHoursInput = {
    update: XOR<DoctorUpdateWithoutOpeningHoursInput, DoctorUncheckedUpdateWithoutOpeningHoursInput>
    create: XOR<DoctorCreateWithoutOpeningHoursInput, DoctorUncheckedCreateWithoutOpeningHoursInput>
  }

  export type DoctorUpdateWithoutOpeningHoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutDoctorInput
    person?: PersonUpdateOneRequiredWithoutDoctorInput
    reservations?: ReservationUpdateManyWithoutDoctorInput
    references?: ReferenceUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUpdateManyWithoutDoctorInput
  }

  export type DoctorUncheckedUpdateWithoutOpeningHoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    actuality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    profilePicture?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutDoctorInput
    references?: ReferenceUncheckedUpdateManyWithoutDoctorInput
    languages?: DoctorLanguageUncheckedUpdateManyWithoutDoctorInput
  }

  export type ReservationUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUpdateOneRequiredWithoutReservationsInput
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateManyWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUpdateWithoutInsuranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    address?: AddressUpdateOneRequiredWithoutPersonInput
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUpdateManyWithoutPersonInput
    doctor?: DoctorUpdateOneWithoutPersonInput
  }

  export type PersonUncheckedUpdateWithoutInsuranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    addressId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    reservations?: ReservationUncheckedUpdateManyWithoutPersonInput
    doctor?: DoctorUncheckedUpdateOneWithoutPersonInput
  }

  export type PersonUncheckedUpdateManyWithoutPersonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surename?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    insuraceNumber?: IntFieldUpdateOperationsInput | number
    addressId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ReservationUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneRequiredWithoutReservationsInput
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    from?: DateTimeFieldUpdateOperationsInput | Date | string
    personComment?: StringFieldUpdateOperationsInput | string
    doctorComment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferenceUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferenceUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferenceUncheckedUpdateManyWithoutReferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    doctor_comment?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorLanguageUpdateWithoutDoctorInput = {
    language?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorLanguageUncheckedUpdateWithoutDoctorInput = {
    language?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorLanguageUncheckedUpdateManyWithoutLanguagesInput = {
    language?: StringFieldUpdateOperationsInput | string
  }

  export type OpeningHoursUpdateWithoutDostorInput = {
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpeningHoursUncheckedUpdateWithoutDostorInput = {
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpeningHoursUncheckedUpdateManyWithoutOpeningHoursInput = {
    day?: StringFieldUpdateOperationsInput | string
    fromTime?: DateTimeFieldUpdateOperationsInput | Date | string
    toTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}